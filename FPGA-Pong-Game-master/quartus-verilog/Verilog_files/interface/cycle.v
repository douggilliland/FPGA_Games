// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   wjw13@EEWS104A-029
//  Generated date: Thu May 14 14:02:19 2015
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    ball_update_core
// ------------------------------------------------------------------


module ball_update_core (
  clk, en, arst_n, video_in_rsc_mgc_in_wire_d, vga_xy_rsc_mgc_in_wire_d, video_out_rsc_mgc_out_stdreg_d,
      ball_x_out_rsc_mgc_out_stdreg_d, ball_y_out_rsc_mgc_out_stdreg_d, switch1_rsc_mgc_in_wire_d,
      switch2_rsc_mgc_in_wire_d, left_rsc_mgc_out_stdreg_d, right_rsc_mgc_out_stdreg_d
);
  input clk;
  input en;
  input arst_n;
  input [29:0] video_in_rsc_mgc_in_wire_d;
  input [19:0] vga_xy_rsc_mgc_in_wire_d;
  output [29:0] video_out_rsc_mgc_out_stdreg_d;
  reg [29:0] video_out_rsc_mgc_out_stdreg_d;
  output [9:0] ball_x_out_rsc_mgc_out_stdreg_d;
  reg [9:0] ball_x_out_rsc_mgc_out_stdreg_d;
  output [9:0] ball_y_out_rsc_mgc_out_stdreg_d;
  reg [9:0] ball_y_out_rsc_mgc_out_stdreg_d;
  input switch1_rsc_mgc_in_wire_d;
  input switch2_rsc_mgc_in_wire_d;
  output [2:0] left_rsc_mgc_out_stdreg_d;
  reg [2:0] left_rsc_mgc_out_stdreg_d;
  output [2:0] right_rsc_mgc_out_stdreg_d;
  reg [2:0] right_rsc_mgc_out_stdreg_d;



  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : core
    // Interconnect Declarations
    reg [2:0] state_sva;
    reg [9:0] ball_x_sva;
    reg [9:0] ball_y_sva;
    reg init_sva;
    reg [1:0] left_miss_1_sva;
    reg [1:0] right_miss_1_sva;
    reg [19:0] counter_sva;
    reg switch1_1_sva;
    reg switch2_1_sva;
    reg [29:0] io_read_video_in_rsc_d_cse_sva;
    reg [19:0] io_read_vga_xy_rsc_d_cse_sva;
    reg [10:0] acc_psp_sg1_sva;
    reg [9:0] acc_2_psp_1_sva;
    reg [3:0] acc_3_psp_1_sva;
    reg [2:0] state_sva_dfm;
    reg [9:0] ball_x_sva_dfm;
    reg [9:0] ball_y_sva_dfm;
    reg slc_svs;
    reg equal_tmp;
    reg nor_tmp;
    reg else_2_slc_svs;
    reg equal_tmp_1;
    reg nor_tmp_1;
    reg [2:0] state_sva_dfm_4;
    reg slc_1_svs;
    reg land_3_sva_1;
    reg land_3_lpi_1_dfm;
    reg land_2_sva_1;
    reg land_2_lpi_1_dfm;
    reg land_1_sva_1;
    reg land_1_lpi_1_dfm;
    reg land_sva_1;
    reg land_lpi_1_dfm;
    reg [8:0] if_7_if_acc_sdt_sva;
    reg if_7_nor_svs;
    reg if_7_land_sva_1;
    reg if_7_land_lpi_1_dfm;
    reg equal_tmp_2;
    reg nor_tmp_2;
    reg [2:0] state_sva_dfm_7;
    reg slc_2_svs;
    reg land_7_sva_1;
    reg land_7_lpi_1_dfm;
    reg land_6_sva_1;
    reg land_6_lpi_1_dfm;
    reg land_5_sva_1;
    reg land_5_lpi_1_dfm;
    reg land_4_sva_1;
    reg land_4_lpi_1_dfm;
    reg if_11_equal_svs;
    reg if_11_land_sva_1;
    reg if_11_land_lpi_1_dfm;
    reg equal_tmp_3;
    reg nor_tmp_3;
    reg [2:0] state_sva_dfm_10;
    reg slc_3_svs;
    reg if_15_slc_svs;
    reg [2:0] state_sva_11;
    reg [2:0] state_sva_dfm_12;
    reg [1:0] left_miss_1_sva_dfm_1;
    reg [1:0] right_miss_1_sva_dfm_1;
    reg slc_4_svs;
    reg if_18_slc_svs;
    reg [1:0] left_miss_1_sva_dfm_2;
    reg [1:0] right_miss_1_sva_3;
    reg [2:0] state_sva_13;
    reg [2:0] state_sva_dfm_14;
    reg [9:0] ball_x_sva_dfm_2;
    reg [9:0] ball_y_sva_dfm_2;
    reg [1:0] left_miss_1_sva_dfm_3;
    reg [1:0] right_miss_1_sva_dfm_3;
    reg land_8_lpi_1_dfm;
    reg else_20_land_lpi_1_dfm;
    reg else_20_else_land_lpi_1_dfm;
    reg [2:0] k_lpi_1_dfm_2;
    reg land_9_lpi_1_dfm;
    reg [9:0] ball_x_sva_4;
    reg [9:0] ball_y_sva_4;
    reg else_24_land_lpi_1_dfm;
    reg [9:0] ball_x_sva_5;
    reg [9:0] ball_y_sva_5;
    reg else_24_else_land_lpi_1_dfm;
    reg [9:0] ball_x_sva_6;
    reg [9:0] ball_y_sva_6;
    reg else_24_else_else_land_lpi_1_dfm;
    reg [9:0] ball_x_sva_7;
    reg [9:0] ball_y_sva_7;
    reg [19:0] counter_sva_dfm;
    reg [19:0] counter_sva_dfm_1;
    reg [19:0] counter_sva_dfm_2;
    reg [9:0] ball_x_sva_dfm_6;
    reg [9:0] ball_y_sva_dfm_6;
    reg nor_8_m1c;
    reg nand_tmp;
    reg nand_2_tmp;
    reg or_m1c;
    reg nor_9_m1c;
    reg [16:0] mul_3_itm;
    reg asn_229_itm;
    reg nor_12_itm;
    reg and_18_itm;
    reg or_6_itm;
    reg if_25_nor_1_itm;
    reg and_29_cse;
    reg else_24_if_nor_1_cse;
    reg and_4_cse;
    reg and_31_cse;
    reg else_24_else_and_cse;
    reg and_32_cse;
    reg [14:0] acc_12_sdt_1;

    reg[7:0] mux_11_nl;
    begin : core_rlpExit
      forever begin : core_rlp
        // C-Step 0 of Loop 'core_rlp'
        state_sva = 3'b0;
        ball_x_sva = 10'b0;
        ball_y_sva = 10'b0;
        init_sva = 1'b0;
        left_miss_1_sva = 2'b0;
        right_miss_1_sva = 2'b0;
        counter_sva = 20'b0;
        begin : mainExit
          forever begin : main
            // C-Step 0 of Loop 'main'
            asn_229_itm = init_sva;
            init_sva = 1'b1;
            begin : waitLoop0Exit
              forever begin : waitLoop0
                @(posedge clk or negedge ( arst_n ));
                if ( ~ arst_n )
                  disable core_rlpExit;
                if ( en )
                  disable waitLoop0Exit;
              end
            end
            // C-Step 1 of Loop 'main'
            else_20_land_lpi_1_dfm = 1'b0;
            else_20_else_land_lpi_1_dfm = 1'b0;
            nor_tmp = 1'b0;
            equal_tmp = 1'b0;
            nor_tmp_1 = 1'b0;
            equal_tmp_1 = 1'b0;
            right_miss_1_sva_3 = 2'b0;
            left_miss_1_sva_dfm_2 = 2'b0;
            land_5_sva_1 = 1'b0;
            land_6_sva_1 = 1'b0;
            land_7_sva_1 = 1'b0;
            land_1_sva_1 = 1'b0;
            land_2_sva_1 = 1'b0;
            land_3_sva_1 = 1'b0;
            else_2_slc_svs = 1'b0;
            switch1_1_sva = switch1_rsc_mgc_in_wire_d;
            switch2_1_sva = switch2_rsc_mgc_in_wire_d;
            io_read_video_in_rsc_d_cse_sva = video_in_rsc_mgc_in_wire_d;
            io_read_vga_xy_rsc_d_cse_sva = vga_xy_rsc_mgc_in_wire_d;
            mul_3_itm = conv_u2u_34_17(conv_u2s_10_17(io_read_video_in_rsc_d_cse_sva[19:10])
                * 17'b11111111111001011);
            state_sva_dfm = MUX_v_3_2_2({3'b1 , state_sva}, asn_229_itm);
            ball_x_sva_dfm = MUX_v_10_2_2({10'b111100000 , ball_x_sva}, asn_229_itm);
            ball_y_sva_dfm = MUX_v_10_2_2({10'b11111010 , ball_y_sva}, asn_229_itm);
            slc_svs = readslicef_9_1_8((conv_u2u_8_9(ball_y_sva_dfm[9:2]) + 9'b111011101));
            if ( slc_svs ) begin
              equal_tmp = (state_sva_dfm[0]) & (~((state_sva_dfm[2]) | (state_sva_dfm[1])));
              nor_tmp = ~(((state_sva_dfm[2]) & (~((state_sva_dfm[1]) | (state_sva_dfm[0]))))
                  | equal_tmp);
            end
            else begin
              else_2_slc_svs = readslicef_7_1_6((conv_u2u_6_7(ball_y_sva_dfm[9:4])
                  + 7'b1100111));
              if ( else_2_slc_svs ) begin
              end
              else begin
                equal_tmp_1 = (state_sva_dfm[1]) & (~((state_sva_dfm[2]) | (state_sva_dfm[0])));
                nor_tmp_1 = ~(((state_sva_dfm[1]) & (state_sva_dfm[0]) & (~ (state_sva_dfm[2])))
                    | equal_tmp_1);
              end
            end
            nor_8_m1c = ~(else_2_slc_svs | slc_svs);
            or_m1c = (nor_tmp_1 & nor_8_m1c) | (else_2_slc_svs & (~ slc_svs)) | (nor_tmp
                & slc_svs);
            state_sva_dfm_4 = MUX1HOT_v_3_5_2({3'b100 , 3'b1 , state_sva , 3'b11
                , 3'b10}, {((~(equal_tmp_1 | nor_tmp_1)) & nor_8_m1c) , ((equal_tmp_1
                & nor_8_m1c) | ((~ asn_229_itm) & or_m1c)) , (asn_229_itm & or_m1c)
                , ((~(equal_tmp | nor_tmp)) & slc_svs) , (equal_tmp & slc_svs)});
            slc_1_svs = readslicef_9_1_8((conv_u2u_8_9(io_read_vga_xy_rsc_d_cse_sva[9:2])
                + 9'b111001001));
            if ( slc_1_svs ) begin
            end
            else begin
              land_3_sva_1 = readslicef_7_1_6((conv_u2u_6_7(io_read_vga_xy_rsc_d_cse_sva[9:4])
                  + 7'b1110001));
            end
            land_3_lpi_1_dfm = land_3_sva_1 & (~ slc_1_svs);
            if ( land_3_lpi_1_dfm ) begin
              land_2_sva_1 = ~ (readslicef_8_1_7((conv_u2u_7_8(io_read_vga_xy_rsc_d_cse_sva[19:13])
                  + 8'b11110001)));
            end
            land_2_lpi_1_dfm = land_2_sva_1 & land_3_lpi_1_dfm;
            if ( land_2_lpi_1_dfm ) begin
              land_1_sva_1 = readslicef_9_1_8((conv_u2u_8_9(io_read_vga_xy_rsc_d_cse_sva[19:12])
                  + 9'b110010111));
            end
            land_1_lpi_1_dfm = land_1_sva_1 & land_2_lpi_1_dfm;
            slc_2_svs = readslicef_4_1_3((conv_u2u_3_4(io_read_vga_xy_rsc_d_cse_sva[9:7])
                + 4'b1011));
            if ( slc_2_svs ) begin
            end
            else begin
              land_7_sva_1 = readslicef_8_1_7((({1'b1 , (io_read_vga_xy_rsc_d_cse_sva[8:2])})
                  + 8'b1011011));
            end
            land_7_lpi_1_dfm = land_7_sva_1 & (~ slc_2_svs);
            if ( land_7_lpi_1_dfm ) begin
              land_6_sva_1 = ~ (readslicef_8_1_7((conv_u2u_7_8(io_read_vga_xy_rsc_d_cse_sva[19:13])
                  + 8'b11110001)));
            end
            land_6_lpi_1_dfm = land_6_sva_1 & land_7_lpi_1_dfm;
            if ( land_6_lpi_1_dfm ) begin
              land_5_sva_1 = readslicef_9_1_8((conv_u2u_8_9(io_read_vga_xy_rsc_d_cse_sva[19:12])
                  + 9'b110010111));
            end
            land_5_lpi_1_dfm = land_5_sva_1 & land_6_lpi_1_dfm;
            slc_3_svs = readslicef_6_1_5(((ball_x_sva_dfm[9:4]) + 6'b110001));
            if ( slc_3_svs ) begin
              if_15_slc_svs = readslicef_3_1_2((({1'b1 , left_miss_1_sva}) + 3'b1));
              left_miss_1_sva_dfm_1 = (left_miss_1_sva & ({{1{if_15_slc_svs}}, if_15_slc_svs}))
                  + 2'b1;
              right_miss_1_sva_dfm_1 = right_miss_1_sva & ({{1{if_15_slc_svs}}, if_15_slc_svs});
            end
            else begin
              left_miss_1_sva_dfm_1 = left_miss_1_sva;
              right_miss_1_sva_dfm_1 = right_miss_1_sva;
            end
            mux_11_nl = MUX_v_8_2_2({8'b1111000 , (ball_x_sva[9:2])}, asn_229_itm
                & (~ slc_3_svs));
            slc_4_svs = readslicef_9_1_8((conv_u2u_8_9(mux_11_nl) + 9'b101011011));
            if ( slc_4_svs ) begin
            end
            else begin
              if_18_slc_svs = readslicef_3_1_2((({1'b1 , right_miss_1_sva_dfm_1})
                  + 3'b1));
              left_miss_1_sva_dfm_2 = left_miss_1_sva_dfm_1 & ({{1{if_18_slc_svs}},
                  if_18_slc_svs});
              right_miss_1_sva_3 = (right_miss_1_sva_dfm_1 & ({{1{if_18_slc_svs}},
                  if_18_slc_svs})) + 2'b1;
            end
            and_29_cse = asn_229_itm & (~ slc_3_svs) & slc_4_svs;
            ball_x_sva_dfm_2 = MUX_v_10_2_2({10'b111100000 , ball_x_sva}, and_29_cse);
            ball_y_sva_dfm_2 = MUX_v_10_2_2({10'b11111010 , ball_y_sva}, and_29_cse);
            left_miss_1_sva_dfm_3 = MUX_v_2_2_2({left_miss_1_sva_dfm_2 , left_miss_1_sva_dfm_1},
                slc_4_svs);
            right_miss_1_sva_dfm_3 = MUX_v_2_2_2({right_miss_1_sva_3 , right_miss_1_sva_dfm_1},
                slc_4_svs);
            land_8_lpi_1_dfm = ~(switch2_1_sva | switch1_1_sva);
            if ( land_8_lpi_1_dfm ) begin
            end
            else begin
              else_20_land_lpi_1_dfm = switch2_1_sva & (~ switch1_1_sva);
              if ( else_20_land_lpi_1_dfm ) begin
              end
              else begin
                else_20_else_land_lpi_1_dfm = ~(switch2_1_sva | (~ switch1_1_sva));
              end
            end
            k_lpi_1_dfm_2 = MUX1HOT_v_3_4_2({3'b100 , 3'b11 , 3'b10 , 3'b1}, {(~(else_20_else_land_lpi_1_dfm
                | else_20_land_lpi_1_dfm | land_8_lpi_1_dfm)) , (else_20_else_land_lpi_1_dfm
                & (~ else_20_land_lpi_1_dfm) & (~ land_8_lpi_1_dfm)) , (else_20_land_lpi_1_dfm
                & (~ land_8_lpi_1_dfm)) , land_8_lpi_1_dfm});
            if_25_nor_1_itm = ~((counter_sva[19]) | (counter_sva[17]) | (counter_sva[16])
                | (counter_sva[13]) | (counter_sva[12]) | (counter_sva[10]) | (counter_sva[9])
                | (counter_sva[7]) | (counter_sva[6]) | (counter_sva[5]) | (counter_sva[4])
                | (counter_sva[3]) | (counter_sva[2]) | (counter_sva[1]) | (counter_sva[0]));
            video_out_rsc_mgc_out_stdreg_d <= io_read_video_in_rsc_d_cse_sva;
            left_rsc_mgc_out_stdreg_d <= {1'b0 , left_miss_1_sva_dfm_3};
            right_rsc_mgc_out_stdreg_d <= {1'b0 , right_miss_1_sva_dfm_3};
            left_miss_1_sva = left_miss_1_sva_dfm_3;
            right_miss_1_sva = right_miss_1_sva_dfm_3;
            begin : waitLoop1Exit
              forever begin : waitLoop1
                @(posedge clk or negedge ( arst_n ));
                if ( ~ arst_n )
                  disable core_rlpExit;
                if ( en )
                  disable waitLoop1Exit;
              end
            end
            // C-Step 2 of Loop 'main'
            nor_tmp_3 = 1'b0;
            equal_tmp_3 = 1'b0;
            nor_tmp_2 = 1'b0;
            equal_tmp_2 = 1'b0;
            if_11_land_sva_1 = 1'b0;
            land_4_sva_1 = 1'b0;
            if_7_land_sva_1 = 1'b0;
            land_sva_1 = 1'b0;
            acc_12_sdt_1 = conv_s2s_30_15(conv_u2s_10_15(io_read_video_in_rsc_d_cse_sva[9:0])
                * 15'b111111111101011) + conv_s2s_11_15({1'b1 , (~ (io_read_video_in_rsc_d_cse_sva[29:20]))});
            acc_psp_sg1_sva = readslicef_18_11_7((({(conv_u2u_10_11(io_read_video_in_rsc_d_cse_sva[29:20])
                + conv_s2u_9_11({1'b1 , (acc_12_sdt_1[14:7])})) , (acc_12_sdt_1[6:0])})
                + ({mul_3_itm , 1'b1})));
            acc_2_psp_1_sva = (acc_psp_sg1_sva[10:1]) + conv_u2s_1_10(acc_psp_sg1_sva[0]);
            acc_3_psp_1_sva = conv_s2s_3_4(acc_2_psp_1_sva[9:7]) + 4'b1;
            if ( land_1_lpi_1_dfm ) begin
              land_sva_1 = readslicef_11_1_10((({(~ acc_3_psp_1_sva) , (~ (acc_2_psp_1_sva[6:0]))})
                  + 11'b100101101));
            end
            land_lpi_1_dfm = land_sva_1 & land_1_lpi_1_dfm;
            if ( land_lpi_1_dfm ) begin
              if_7_if_acc_sdt_sva = conv_u2u_8_9(ball_x_sva_dfm[9:2]) + 9'b111111011;
              if_7_nor_svs = ~((({(if_7_if_acc_sdt_sva[7:0]) , (ball_x_sva_dfm[1:0])})
                  != (io_read_vga_xy_rsc_d_cse_sva[9:0])) | (if_7_if_acc_sdt_sva[8]));
              if ( if_7_nor_svs ) begin
                if_7_land_sva_1 = ball_y_sva_dfm == (io_read_vga_xy_rsc_d_cse_sva[19:10]);
              end
              if_7_land_lpi_1_dfm = if_7_land_sva_1 & if_7_nor_svs;
              if ( if_7_land_lpi_1_dfm ) begin
                equal_tmp_2 = (state_sva_dfm_4[1]) & (state_sva_dfm_4[0]) & (~ (state_sva_dfm_4[2]));
                nor_tmp_2 = ~(((state_sva_dfm_4[2]) & (~((state_sva_dfm_4[1]) | (state_sva_dfm_4[0]))))
                    | equal_tmp_2);
              end
            end
            nand_tmp = ~(if_7_land_lpi_1_dfm & land_lpi_1_dfm);
            state_sva_dfm_7 = MUX1HOT_v_3_3_2({3'b1 , 3'b10 , state_sva_dfm_4}, {(~(equal_tmp_2
                | nor_tmp_2 | nand_tmp)) , (equal_tmp_2 & (~ nand_tmp)) , (nor_tmp_2
                | nand_tmp)});
            if ( land_5_lpi_1_dfm ) begin
              land_4_sva_1 = readslicef_11_1_10((({(~ acc_3_psp_1_sva) , (~ (acc_2_psp_1_sva[6:0]))})
                  + 11'b100101101));
            end
            land_4_lpi_1_dfm = land_4_sva_1 & land_5_lpi_1_dfm;
            if ( land_4_lpi_1_dfm ) begin
              if_11_equal_svs = ball_x_sva_dfm == (io_read_vga_xy_rsc_d_cse_sva[9:0]);
              if ( if_11_equal_svs ) begin
                if_11_land_sva_1 = ball_y_sva_dfm == (io_read_vga_xy_rsc_d_cse_sva[19:10]);
              end
              if_11_land_lpi_1_dfm = if_11_land_sva_1 & if_11_equal_svs;
              if ( if_11_land_lpi_1_dfm ) begin
                equal_tmp_3 = (state_sva_dfm_7[1]) & (~((state_sva_dfm_7[2]) | (state_sva_dfm_7[0])));
                nor_tmp_3 = ~(((state_sva_dfm_7[0]) & (~((state_sva_dfm_7[2]) | (state_sva_dfm_7[1]))))
                    | equal_tmp_3);
              end
            end
            nand_2_tmp = ~(if_11_land_lpi_1_dfm & land_4_lpi_1_dfm);
            nor_12_itm = ~(equal_tmp_3 | nor_tmp_3 | nand_2_tmp);
            and_18_itm = equal_tmp_3 & (~ nand_2_tmp);
            or_6_itm = nor_tmp_3 | nand_2_tmp;
            begin : waitLoop2Exit
              forever begin : waitLoop2
                @(posedge clk or negedge ( arst_n ));
                if ( ~ arst_n )
                  disable core_rlpExit;
                if ( en )
                  disable waitLoop2Exit;
              end
            end
            // C-Step 3 of Loop 'main'
            else_24_else_land_lpi_1_dfm = 1'b0;
            counter_sva_dfm_2 = 20'b0;
            counter_sva_dfm_1 = 20'b0;
            counter_sva_dfm = 20'b0;
            ball_y_sva_7 = 10'b0;
            ball_x_sva_7 = 10'b0;
            ball_y_sva_6 = 10'b0;
            ball_x_sva_6 = 10'b0;
            ball_y_sva_5 = 10'b0;
            ball_x_sva_5 = 10'b0;
            ball_y_sva_4 = 10'b0;
            ball_x_sva_4 = 10'b0;
            state_sva_13 = 3'b0;
            state_sva_11 = 3'b0;
            state_sva_dfm_10 = MUX1HOT_v_3_3_2({3'b100 , 3'b11 , state_sva_dfm_7},
                {nor_12_itm , and_18_itm , or_6_itm});
            if ( slc_3_svs ) begin
              if ( state_sva_dfm_10[2] ) begin
              end
              else begin
                state_sva_11 = conv_u2u_2_3(state_sva_dfm_10[1:0]) + 3'b1;
              end
            end
            state_sva_dfm_12 = MUX1HOT_v_3_3_2({state_sva_dfm_10 , state_sva_11 ,
                3'b1}, {(~ slc_3_svs) , ((~ (state_sva_dfm_10[2])) & slc_3_svs) ,
                ((state_sva_dfm_10[2]) & slc_3_svs)});
            if ( slc_4_svs ) begin
            end
            else if ( state_sva_dfm_12[2] ) begin
            end
            else begin
              state_sva_13 = conv_u2u_2_3(state_sva_dfm_12[1:0]) + 3'b1;
            end
            state_sva_dfm_14 = MUX1HOT_v_3_3_2({state_sva_13 , 3'b1 , state_sva_dfm_12},
                {(~((state_sva_dfm_12[2]) | slc_4_svs)) , ((state_sva_dfm_12[2])
                & (~ slc_4_svs)) , slc_4_svs});
            land_9_lpi_1_dfm = (counter_sva[18]) & (counter_sva[15]) & (counter_sva[14])
                & (counter_sva[11]) & (counter_sva[8]) & if_25_nor_1_itm & (state_sva_dfm_14[0])
                & (~((state_sva_dfm_14[2]) | (state_sva_dfm_14[1])));
            if ( land_9_lpi_1_dfm ) begin
              ball_x_sva_4 = ball_x_sva_dfm_2 + conv_u2u_3_10(k_lpi_1_dfm_2);
              ball_y_sva_4 = readslicef_11_10_1((({ball_y_sva_dfm_2 , 1'b1}) + ({7'b1111111
                  , (~ k_lpi_1_dfm_2) , 1'b1})));
            end
            else begin
              else_24_if_nor_1_cse = ~((counter_sva[19]) | (counter_sva[17]) | (counter_sva[16])
                  | (counter_sva[13]) | (counter_sva[12]) | (counter_sva[10]) | (counter_sva[9])
                  | (counter_sva[7]) | (counter_sva[6]) | (counter_sva[5]) | (counter_sva[4])
                  | (counter_sva[3]) | (counter_sva[2]) | (counter_sva[1]) | (counter_sva[0]));
              else_24_land_lpi_1_dfm = (counter_sva[18]) & (counter_sva[15]) & (counter_sva[14])
                  & (counter_sva[11]) & (counter_sva[8]) & else_24_if_nor_1_cse &
                  (state_sva_dfm_14[1]) & (~((state_sva_dfm_14[2]) | (state_sva_dfm_14[0])));
              if ( else_24_land_lpi_1_dfm ) begin
                ball_x_sva_5 = ball_x_sva_dfm_2 + conv_u2u_3_10(k_lpi_1_dfm_2);
                ball_y_sva_5 = ball_y_sva_dfm_2 + conv_u2u_3_10(k_lpi_1_dfm_2);
              end
              else begin
                else_24_else_land_lpi_1_dfm = (counter_sva[18]) & (counter_sva[15])
                    & (counter_sva[14]) & (counter_sva[11]) & (counter_sva[8]) &
                    else_24_if_nor_1_cse & (state_sva_dfm_14[1]) & (state_sva_dfm_14[0])
                    & (~ (state_sva_dfm_14[2]));
                if ( else_24_else_land_lpi_1_dfm ) begin
                  ball_x_sva_6 = readslicef_11_10_1((({ball_x_sva_dfm_2 , 1'b1})
                      + ({7'b1111111 , (~ k_lpi_1_dfm_2) , 1'b1})));
                  ball_y_sva_6 = ball_y_sva_dfm_2 + conv_u2u_3_10(k_lpi_1_dfm_2);
                end
                else begin
                  else_24_else_else_land_lpi_1_dfm = (counter_sva[18]) & (counter_sva[15])
                      & (counter_sva[14]) & (counter_sva[11]) & (counter_sva[8])
                      & else_24_if_nor_1_cse & (state_sva_dfm_14[2]) & (~((state_sva_dfm_14[1])
                      | (state_sva_dfm_14[0])));
                  if ( else_24_else_else_land_lpi_1_dfm ) begin
                    ball_x_sva_7 = readslicef_11_10_1((({ball_x_sva_dfm_2 , 1'b1})
                        + ({7'b1111111 , (~ k_lpi_1_dfm_2) , 1'b1})));
                    ball_y_sva_7 = readslicef_11_10_1((({ball_y_sva_dfm_2 , 1'b1})
                        + ({7'b1111111 , (~ k_lpi_1_dfm_2) , 1'b1})));
                  end
                  counter_sva_dfm = counter_sva & (signext_20_1(~ else_24_else_else_land_lpi_1_dfm));
                end
                counter_sva_dfm_1 = counter_sva_dfm & (signext_20_1(~ else_24_else_land_lpi_1_dfm));
              end
              counter_sva_dfm_2 = counter_sva_dfm_1 & (signext_20_1(~ else_24_land_lpi_1_dfm));
            end
            nor_9_m1c = ~(else_24_land_lpi_1_dfm | land_9_lpi_1_dfm);
            and_4_cse = else_24_land_lpi_1_dfm & (~ land_9_lpi_1_dfm);
            and_31_cse = else_24_else_land_lpi_1_dfm & nor_9_m1c;
            else_24_else_and_cse = else_24_else_else_land_lpi_1_dfm & (~ else_24_else_land_lpi_1_dfm)
                & nor_9_m1c;
            and_32_cse = (~(else_24_else_else_land_lpi_1_dfm | else_24_else_land_lpi_1_dfm))
                & nor_9_m1c;
            ball_x_sva_dfm_6 = MUX1HOT_v_10_5_2({ball_x_sva_4 , ball_x_sva_5 , ball_x_sva_6
                , ball_x_sva_7 , ball_x_sva_dfm_2}, {land_9_lpi_1_dfm , and_4_cse
                , and_31_cse , else_24_else_and_cse , and_32_cse});
            ball_y_sva_dfm_6 = MUX1HOT_v_10_5_2({ball_y_sva_4 , ball_y_sva_5 , ball_y_sva_6
                , ball_y_sva_7 , ball_y_sva_dfm_2}, {land_9_lpi_1_dfm , and_4_cse
                , and_31_cse , else_24_else_and_cse , and_32_cse});
            ball_x_out_rsc_mgc_out_stdreg_d <= ball_x_sva_dfm_6;
            ball_y_out_rsc_mgc_out_stdreg_d <= ball_y_sva_dfm_6;
            state_sva = state_sva_dfm_14;
            ball_x_sva = ball_x_sva_dfm_6;
            ball_y_sva = ball_y_sva_dfm_6;
            counter_sva = (counter_sva_dfm_2 & (signext_20_1(~ land_9_lpi_1_dfm)))
                + 20'b1;
            begin : waitLoop3Exit
              forever begin : waitLoop3
                @(posedge clk or negedge ( arst_n ));
                if ( ~ arst_n )
                  disable core_rlpExit;
                if ( en )
                  disable waitLoop3Exit;
              end
            end
            // C-Step 4 of Loop 'main'
          end
        end
      end
    end
    acc_12_sdt_1 = 15'b0;
    and_32_cse = 1'b0;
    else_24_else_and_cse = 1'b0;
    and_31_cse = 1'b0;
    and_4_cse = 1'b0;
    else_24_if_nor_1_cse = 1'b0;
    and_29_cse = 1'b0;
    if_25_nor_1_itm = 1'b0;
    or_6_itm = 1'b0;
    and_18_itm = 1'b0;
    nor_12_itm = 1'b0;
    asn_229_itm = 1'b0;
    mul_3_itm = 17'b0;
    nor_9_m1c = 1'b0;
    or_m1c = 1'b0;
    nand_2_tmp = 1'b0;
    nand_tmp = 1'b0;
    nor_8_m1c = 1'b0;
    ball_y_sva_dfm_6 = 10'b0;
    ball_x_sva_dfm_6 = 10'b0;
    counter_sva_dfm_2 = 20'b0;
    counter_sva_dfm_1 = 20'b0;
    counter_sva_dfm = 20'b0;
    ball_y_sva_7 = 10'b0;
    ball_x_sva_7 = 10'b0;
    else_24_else_else_land_lpi_1_dfm = 1'b0;
    ball_y_sva_6 = 10'b0;
    ball_x_sva_6 = 10'b0;
    else_24_else_land_lpi_1_dfm = 1'b0;
    ball_y_sva_5 = 10'b0;
    ball_x_sva_5 = 10'b0;
    else_24_land_lpi_1_dfm = 1'b0;
    ball_y_sva_4 = 10'b0;
    ball_x_sva_4 = 10'b0;
    land_9_lpi_1_dfm = 1'b0;
    k_lpi_1_dfm_2 = 3'b0;
    else_20_else_land_lpi_1_dfm = 1'b0;
    else_20_land_lpi_1_dfm = 1'b0;
    land_8_lpi_1_dfm = 1'b0;
    right_miss_1_sva_dfm_3 = 2'b0;
    left_miss_1_sva_dfm_3 = 2'b0;
    ball_y_sva_dfm_2 = 10'b0;
    ball_x_sva_dfm_2 = 10'b0;
    state_sva_dfm_14 = 3'b0;
    state_sva_13 = 3'b0;
    right_miss_1_sva_3 = 2'b0;
    left_miss_1_sva_dfm_2 = 2'b0;
    if_18_slc_svs = 1'b0;
    slc_4_svs = 1'b0;
    right_miss_1_sva_dfm_1 = 2'b0;
    left_miss_1_sva_dfm_1 = 2'b0;
    state_sva_dfm_12 = 3'b0;
    state_sva_11 = 3'b0;
    if_15_slc_svs = 1'b0;
    slc_3_svs = 1'b0;
    state_sva_dfm_10 = 3'b0;
    nor_tmp_3 = 1'b0;
    equal_tmp_3 = 1'b0;
    if_11_land_lpi_1_dfm = 1'b0;
    if_11_land_sva_1 = 1'b0;
    if_11_equal_svs = 1'b0;
    land_4_lpi_1_dfm = 1'b0;
    land_4_sva_1 = 1'b0;
    land_5_lpi_1_dfm = 1'b0;
    land_5_sva_1 = 1'b0;
    land_6_lpi_1_dfm = 1'b0;
    land_6_sva_1 = 1'b0;
    land_7_lpi_1_dfm = 1'b0;
    land_7_sva_1 = 1'b0;
    slc_2_svs = 1'b0;
    state_sva_dfm_7 = 3'b0;
    nor_tmp_2 = 1'b0;
    equal_tmp_2 = 1'b0;
    if_7_land_lpi_1_dfm = 1'b0;
    if_7_land_sva_1 = 1'b0;
    if_7_nor_svs = 1'b0;
    if_7_if_acc_sdt_sva = 9'b0;
    land_lpi_1_dfm = 1'b0;
    land_sva_1 = 1'b0;
    land_1_lpi_1_dfm = 1'b0;
    land_1_sva_1 = 1'b0;
    land_2_lpi_1_dfm = 1'b0;
    land_2_sva_1 = 1'b0;
    land_3_lpi_1_dfm = 1'b0;
    land_3_sva_1 = 1'b0;
    slc_1_svs = 1'b0;
    state_sva_dfm_4 = 3'b0;
    nor_tmp_1 = 1'b0;
    equal_tmp_1 = 1'b0;
    else_2_slc_svs = 1'b0;
    nor_tmp = 1'b0;
    equal_tmp = 1'b0;
    slc_svs = 1'b0;
    ball_y_sva_dfm = 10'b0;
    ball_x_sva_dfm = 10'b0;
    state_sva_dfm = 3'b0;
    acc_3_psp_1_sva = 4'b0;
    acc_2_psp_1_sva = 10'b0;
    acc_psp_sg1_sva = 11'b0;
    io_read_vga_xy_rsc_d_cse_sva = 20'b0;
    io_read_video_in_rsc_d_cse_sva = 30'b0;
    switch2_1_sva = 1'b0;
    switch1_1_sva = 1'b0;
    counter_sva = 20'b0;
    right_miss_1_sva = 2'b0;
    left_miss_1_sva = 2'b0;
    init_sva = 1'b0;
    ball_y_sva = 10'b0;
    ball_x_sva = 10'b0;
    state_sva = 3'b0;
    right_rsc_mgc_out_stdreg_d <= 3'b0;
    left_rsc_mgc_out_stdreg_d <= 3'b0;
    ball_y_out_rsc_mgc_out_stdreg_d <= 10'b0;
    ball_x_out_rsc_mgc_out_stdreg_d <= 10'b0;
    video_out_rsc_mgc_out_stdreg_d <= 30'b0;
  end


  function [2:0] MUX_v_3_2_2;
    input [5:0] inputs;
    input [0:0] sel;
    reg [2:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[5:3];
      end
      1'b1 : begin
        result = inputs[2:0];
      end
      default : begin
        result = inputs[5:3];
      end
    endcase
    MUX_v_3_2_2 = result;
  end
  endfunction


  function [9:0] MUX_v_10_2_2;
    input [19:0] inputs;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[19:10];
      end
      1'b1 : begin
        result = inputs[9:0];
      end
      default : begin
        result = inputs[19:10];
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function [0:0] readslicef_9_1_8;
    input [8:0] vector;
    reg [8:0] tmp;
  begin
    tmp = vector >> 8;
    readslicef_9_1_8 = tmp[0:0];
  end
  endfunction


  function [0:0] readslicef_7_1_6;
    input [6:0] vector;
    reg [6:0] tmp;
  begin
    tmp = vector >> 6;
    readslicef_7_1_6 = tmp[0:0];
  end
  endfunction


  function [2:0] MUX1HOT_v_3_5_2;
    input [14:0] inputs;
    input [4:0] sel;
    reg [2:0] result;
    integer i;
  begin
    result = inputs[0+:3] & {3{sel[0]}};
    for( i = 1; i < 5; i = i + 1 )
      result = result | (inputs[i*3+:3] & {3{sel[i]}});
    MUX1HOT_v_3_5_2 = result;
  end
  endfunction


  function [0:0] readslicef_8_1_7;
    input [7:0] vector;
    reg [7:0] tmp;
  begin
    tmp = vector >> 7;
    readslicef_8_1_7 = tmp[0:0];
  end
  endfunction


  function [0:0] readslicef_4_1_3;
    input [3:0] vector;
    reg [3:0] tmp;
  begin
    tmp = vector >> 3;
    readslicef_4_1_3 = tmp[0:0];
  end
  endfunction


  function [0:0] readslicef_6_1_5;
    input [5:0] vector;
    reg [5:0] tmp;
  begin
    tmp = vector >> 5;
    readslicef_6_1_5 = tmp[0:0];
  end
  endfunction


  function [0:0] readslicef_3_1_2;
    input [2:0] vector;
    reg [2:0] tmp;
  begin
    tmp = vector >> 2;
    readslicef_3_1_2 = tmp[0:0];
  end
  endfunction


  function [7:0] MUX_v_8_2_2;
    input [15:0] inputs;
    input [0:0] sel;
    reg [7:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[15:8];
      end
      1'b1 : begin
        result = inputs[7:0];
      end
      default : begin
        result = inputs[15:8];
      end
    endcase
    MUX_v_8_2_2 = result;
  end
  endfunction


  function [1:0] MUX_v_2_2_2;
    input [3:0] inputs;
    input [0:0] sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[3:2];
      end
      1'b1 : begin
        result = inputs[1:0];
      end
      default : begin
        result = inputs[3:2];
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function [2:0] MUX1HOT_v_3_4_2;
    input [11:0] inputs;
    input [3:0] sel;
    reg [2:0] result;
    integer i;
  begin
    result = inputs[0+:3] & {3{sel[0]}};
    for( i = 1; i < 4; i = i + 1 )
      result = result | (inputs[i*3+:3] & {3{sel[i]}});
    MUX1HOT_v_3_4_2 = result;
  end
  endfunction


  function [10:0] readslicef_18_11_7;
    input [17:0] vector;
    reg [17:0] tmp;
  begin
    tmp = vector >> 7;
    readslicef_18_11_7 = tmp[10:0];
  end
  endfunction


  function [0:0] readslicef_11_1_10;
    input [10:0] vector;
    reg [10:0] tmp;
  begin
    tmp = vector >> 10;
    readslicef_11_1_10 = tmp[0:0];
  end
  endfunction


  function [2:0] MUX1HOT_v_3_3_2;
    input [8:0] inputs;
    input [2:0] sel;
    reg [2:0] result;
    integer i;
  begin
    result = inputs[0+:3] & {3{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*3+:3] & {3{sel[i]}});
    MUX1HOT_v_3_3_2 = result;
  end
  endfunction


  function [9:0] readslicef_11_10_1;
    input [10:0] vector;
    reg [10:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_11_10_1 = tmp[9:0];
  end
  endfunction


  function [19:0] signext_20_1;
    input [0:0] vector;
  begin
    signext_20_1= {{19{vector[0]}}, vector};
  end
  endfunction


  function [9:0] MUX1HOT_v_10_5_2;
    input [49:0] inputs;
    input [4:0] sel;
    reg [9:0] result;
    integer i;
  begin
    result = inputs[0+:10] & {10{sel[0]}};
    for( i = 1; i < 5; i = i + 1 )
      result = result | (inputs[i*10+:10] & {10{sel[i]}});
    MUX1HOT_v_10_5_2 = result;
  end
  endfunction


  function  [16:0] conv_u2u_34_17 ;
    input [33:0]  vector ;
  begin
    conv_u2u_34_17 = vector[16:0];
  end
  endfunction


  function signed [16:0] conv_u2s_10_17 ;
    input [9:0]  vector ;
  begin
    conv_u2s_10_17 = {{7{1'b0}}, vector};
  end
  endfunction


  function  [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction


  function  [6:0] conv_u2u_6_7 ;
    input [5:0]  vector ;
  begin
    conv_u2u_6_7 = {1'b0, vector};
  end
  endfunction


  function  [7:0] conv_u2u_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_8 = {1'b0, vector};
  end
  endfunction


  function  [3:0] conv_u2u_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_4 = {1'b0, vector};
  end
  endfunction


  function signed [14:0] conv_s2s_30_15 ;
    input signed [29:0]  vector ;
  begin
    conv_s2s_30_15 = vector[14:0];
  end
  endfunction


  function signed [14:0] conv_u2s_10_15 ;
    input [9:0]  vector ;
  begin
    conv_u2s_10_15 = {{5{1'b0}}, vector};
  end
  endfunction


  function signed [14:0] conv_s2s_11_15 ;
    input signed [10:0]  vector ;
  begin
    conv_s2s_11_15 = {{4{vector[10]}}, vector};
  end
  endfunction


  function  [10:0] conv_u2u_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_11 = {1'b0, vector};
  end
  endfunction


  function  [10:0] conv_s2u_9_11 ;
    input signed [8:0]  vector ;
  begin
    conv_s2u_9_11 = {{2{vector[8]}}, vector};
  end
  endfunction


  function signed [9:0] conv_u2s_1_10 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_10 = {{9{1'b0}}, vector};
  end
  endfunction


  function signed [3:0] conv_s2s_3_4 ;
    input signed [2:0]  vector ;
  begin
    conv_s2s_3_4 = {vector[2], vector};
  end
  endfunction


  function  [2:0] conv_u2u_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_3 = {1'b0, vector};
  end
  endfunction


  function  [9:0] conv_u2u_3_10 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_10 = {{7{1'b0}}, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    ball_update
//  Generated from file(s):
//    2) $PROJECT_HOME/May12_ball_update.c
// ------------------------------------------------------------------


module ball_update (
  video_in_rsc_z, vga_xy_rsc_z, video_out_rsc_z, ball_x_out_rsc_z, ball_y_out_rsc_z,
      switch1_rsc_z, switch2_rsc_z, left_rsc_z, right_rsc_z, clk, en, arst_n
);
  input [29:0] video_in_rsc_z;
  input [19:0] vga_xy_rsc_z;
  output [29:0] video_out_rsc_z;
  output [9:0] ball_x_out_rsc_z;
  output [9:0] ball_y_out_rsc_z;
  input switch1_rsc_z;
  input switch2_rsc_z;
  output [2:0] left_rsc_z;
  output [2:0] right_rsc_z;
  input clk;
  input en;
  input arst_n;


  // Interconnect Declarations
  wire [29:0] video_in_rsc_mgc_in_wire_d;
  wire [19:0] vga_xy_rsc_mgc_in_wire_d;
  wire [29:0] video_out_rsc_mgc_out_stdreg_d;
  wire [9:0] ball_x_out_rsc_mgc_out_stdreg_d;
  wire [9:0] ball_y_out_rsc_mgc_out_stdreg_d;
  wire switch1_rsc_mgc_in_wire_d;
  wire switch2_rsc_mgc_in_wire_d;
  wire [2:0] left_rsc_mgc_out_stdreg_d;
  wire [2:0] right_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_wire #(.rscid(1),
  .width(30)) video_in_rsc_mgc_in_wire (
      .d(video_in_rsc_mgc_in_wire_d),
      .z(video_in_rsc_z)
    );
  mgc_in_wire #(.rscid(2),
  .width(20)) vga_xy_rsc_mgc_in_wire (
      .d(vga_xy_rsc_mgc_in_wire_d),
      .z(vga_xy_rsc_z)
    );
  mgc_out_stdreg #(.rscid(3),
  .width(30)) video_out_rsc_mgc_out_stdreg (
      .d(video_out_rsc_mgc_out_stdreg_d),
      .z(video_out_rsc_z)
    );
  mgc_out_stdreg #(.rscid(4),
  .width(10)) ball_x_out_rsc_mgc_out_stdreg (
      .d(ball_x_out_rsc_mgc_out_stdreg_d),
      .z(ball_x_out_rsc_z)
    );
  mgc_out_stdreg #(.rscid(5),
  .width(10)) ball_y_out_rsc_mgc_out_stdreg (
      .d(ball_y_out_rsc_mgc_out_stdreg_d),
      .z(ball_y_out_rsc_z)
    );
  mgc_in_wire #(.rscid(6),
  .width(1)) switch1_rsc_mgc_in_wire (
      .d(switch1_rsc_mgc_in_wire_d),
      .z(switch1_rsc_z)
    );
  mgc_in_wire #(.rscid(7),
  .width(1)) switch2_rsc_mgc_in_wire (
      .d(switch2_rsc_mgc_in_wire_d),
      .z(switch2_rsc_z)
    );
  mgc_out_stdreg #(.rscid(8),
  .width(3)) left_rsc_mgc_out_stdreg (
      .d(left_rsc_mgc_out_stdreg_d),
      .z(left_rsc_z)
    );
  mgc_out_stdreg #(.rscid(9),
  .width(3)) right_rsc_mgc_out_stdreg (
      .d(right_rsc_mgc_out_stdreg_d),
      .z(right_rsc_z)
    );
  ball_update_core ball_update_core_inst (
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .video_in_rsc_mgc_in_wire_d(video_in_rsc_mgc_in_wire_d),
      .vga_xy_rsc_mgc_in_wire_d(vga_xy_rsc_mgc_in_wire_d),
      .video_out_rsc_mgc_out_stdreg_d(video_out_rsc_mgc_out_stdreg_d),
      .ball_x_out_rsc_mgc_out_stdreg_d(ball_x_out_rsc_mgc_out_stdreg_d),
      .ball_y_out_rsc_mgc_out_stdreg_d(ball_y_out_rsc_mgc_out_stdreg_d),
      .switch1_rsc_mgc_in_wire_d(switch1_rsc_mgc_in_wire_d),
      .switch2_rsc_mgc_in_wire_d(switch2_rsc_mgc_in_wire_d),
      .left_rsc_mgc_out_stdreg_d(left_rsc_mgc_out_stdreg_d),
      .right_rsc_mgc_out_stdreg_d(right_rsc_mgc_out_stdreg_d)
    );
endmodule



