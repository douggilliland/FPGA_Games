// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   wjw13@EEWS104A-029
//  Generated date: Thu May 14 14:02:31 2015
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    ball_update_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module ball_update_core_fsm (
  clk, en, arst_n, fsm_output
);
  input clk;
  input en;
  input arst_n;
  output [3:0] fsm_output;
  reg [3:0] fsm_output;


  // FSM State Type Declaration for ball_update_core_fsm_1
  parameter
    st_main = 2'd0,
    st_main_1 = 2'd1,
    st_main_2 = 2'd2,
    st_main_3 = 2'd3,
    state_x = 2'b00;

  reg [1:0] state_var;
  reg [1:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : ball_update_core_fsm_1
    case (state_var)
      st_main : begin
        fsm_output = 4'b1;
        state_var_NS = st_main_1;
      end
      st_main_1 : begin
        fsm_output = 4'b10;
        state_var_NS = st_main_2;
      end
      st_main_2 : begin
        fsm_output = 4'b100;
        state_var_NS = st_main_3;
      end
      st_main_3 : begin
        fsm_output = 4'b1000;
        state_var_NS = st_main;
      end
      default : begin
        fsm_output = 4'b0000;
        state_var_NS = st_main;
      end
    endcase
  end

  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      state_var <= st_main;
    end
    else if ( en ) begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    ball_update_core
// ------------------------------------------------------------------


module ball_update_core (
  clk, en, arst_n, video_in_rsc_mgc_in_wire_d, vga_xy_rsc_mgc_in_wire_d, video_out_rsc_mgc_out_stdreg_d,
      ball_x_out_rsc_mgc_out_stdreg_d, ball_y_out_rsc_mgc_out_stdreg_d, switch1_rsc_mgc_in_wire_d,
      switch2_rsc_mgc_in_wire_d, left_rsc_mgc_out_stdreg_d, right_rsc_mgc_out_stdreg_d
);
  input clk;
  input en;
  input arst_n;
  input [29:0] video_in_rsc_mgc_in_wire_d;
  input [19:0] vga_xy_rsc_mgc_in_wire_d;
  output [29:0] video_out_rsc_mgc_out_stdreg_d;
  reg [29:0] video_out_rsc_mgc_out_stdreg_d;
  output [9:0] ball_x_out_rsc_mgc_out_stdreg_d;
  reg [9:0] ball_x_out_rsc_mgc_out_stdreg_d;
  output [9:0] ball_y_out_rsc_mgc_out_stdreg_d;
  reg [9:0] ball_y_out_rsc_mgc_out_stdreg_d;
  input switch1_rsc_mgc_in_wire_d;
  input switch2_rsc_mgc_in_wire_d;
  output [2:0] left_rsc_mgc_out_stdreg_d;
  reg [2:0] left_rsc_mgc_out_stdreg_d;
  output [2:0] right_rsc_mgc_out_stdreg_d;
  reg [2:0] right_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations
  wire [3:0] fsm_output;
  wire else_24_else_if_and_tmp;
  wire [2:0] mux1h_6_tmp;
  wire [2:0] mux1h_3_tmp;
  wire if_7_aif_equal_tmp;
  wire if_25_nor_1_tmp;
  wire and_dcpl_24;
  wire and_dcpl_25;
  wire or_dcpl_9;
  wire not_tmp_18;
  reg [2:0] state_sva;
  reg [9:0] ball_x_sva;
  reg [9:0] ball_y_sva;
  reg [1:0] left_miss_1_sva;
  reg [1:0] right_miss_1_sva;
  reg [19:0] counter_sva;
  reg [19:0] io_read_vga_xy_rsc_d_cse_sva;
  reg [9:0] ball_x_sva_dfm;
  reg [9:0] ball_y_sva_dfm;
  reg [2:0] state_sva_dfm_4;
  reg land_1_lpi_1_dfm;
  reg if_7_land_lpi_1_dfm;
  reg [2:0] state_sva_dfm_7;
  reg land_5_lpi_1_dfm;
  reg if_11_land_lpi_1_dfm;
  reg slc_3_svs;
  reg slc_4_svs;
  reg [9:0] ball_x_sva_dfm_2;
  reg [9:0] ball_y_sva_dfm_2;
  reg [2:0] k_lpi_1_dfm_2;
  reg else_24_land_lpi_1_dfm;
  reg else_24_else_else_land_lpi_1_dfm;
  reg [16:0] mul_3_itm;
  reg asn_229_itm;
  reg nor_12_itm;
  reg and_18_itm;
  reg or_6_itm;
  reg if_25_nor_1_itm;
  wire and_67_cse;
  wire [2:0] state_sva_dfm_10;
  wire [10:0] aif_5_acc_2;
  wire [11:0] nl_aif_5_acc_2;
  wire [8:0] if_7_acc_6;
  wire [9:0] nl_if_7_acc_6;
  wire [7:0] if_7_acc_8;
  wire [8:0] nl_if_7_acc_8;
  wire equal_tmp_1;
  wire nor_tmp_1;
  wire nor_8_m1c;
  wire or_m1c;
  wire equal_tmp;
  wire nor_tmp_5;
  wire [9:0] ball_y_sva_dfm_mx0;
  wire and_68_cse;
  wire and_78_cse;
  wire nand_3_cse;
  wire [1:0] right_miss_1_sva_dfm_1_mx0;
  wire [8:0] if_18_acc_3_itm;
  wire [9:0] nl_if_18_acc_3_itm;
  wire [5:0] if_15_acc_3_itm;
  wire [6:0] nl_if_15_acc_3_itm;
  wire [8:0] if_1_acc_itm;
  wire [9:0] nl_if_1_acc_itm;
  wire [2:0] if_15_acc_itm;
  wire [3:0] nl_if_15_acc_itm;
  wire [2:0] if_18_acc_itm;
  wire [3:0] nl_if_18_acc_itm;
  wire [16:0] z_out;
  wire [33:0] nl_z_out;
  wire [2:0] z_out_1;
  wire [3:0] nl_z_out_1;
  wire [2:0] z_out_2;
  wire [3:0] nl_z_out_2;
  wire [8:0] z_out_3;
  wire [9:0] nl_z_out_3;
  wire [9:0] z_out_4;
  wire [10:0] nl_z_out_4;
  wire [2:0] state_sva_dfm_mx0;
  wire [9:0] ball_x_sva_dfm_mx0;
  wire [1:0] left_miss_1_sva_dfm_1_mx0;
  wire [1:0] left_miss_1_sva_dfm_2;
  wire else_20_else_land_lpi_1_dfm;
  wire else_20_land_lpi_1_dfm;
  wire if_7_land_lpi_1_dfm_mx0w0;
  wire if_11_land_lpi_1_dfm_mx0w0;
  wire else_24_else_else_land_lpi_1_dfm_mx0w0;
  wire else_24_else_else_land_lpi_1_dfm_mx1;
  wire else_24_land_lpi_1_dfm_mx1w0;
  wire [9:0] ball_y_sva_dfm_6_mx0w0;
  wire [9:0] ball_x_sva_dfm_6_mx0w0;
  wire land_8_lpi_1_dfm;
  wire nor_tmp_2;
  wire equal_tmp_2;
  wire nor_tmp_3;
  wire equal_tmp_3;
  wire nand_2_tmp;
  wire nand_tmp;
  wire [14:0] acc_12_sdt_1;
  wire [15:0] nl_acc_12_sdt_1;
  wire [2:0] state_sva_dfm_12;
  wire land_9_lpi_1_dfm;
  wire and_4_cse;
  wire and_31_cse;
  wire else_24_else_and_cse;
  wire and_32_cse;
  wire nor_9_m1c;
  wire mux_43_itm;
  wire [6:0] else_2_if_acc_itm;
  wire [7:0] nl_else_2_if_acc_itm;
  wire [17:0] acc_itm;
  wire [18:0] nl_acc_itm;
  wire and_103_cse;

  wire[0:0] mux_31_nl;
  wire[0:0] mux_30_nl;
  wire[7:0] mux_20_nl;
  wire[0:0] mux_9_nl;
  wire[0:0] mux_7_nl;
  wire[9:0] mux_41_nl;
  wire[1:0] mux_35_nl;
  wire[1:0] mux_36_nl;
  wire[7:0] mux_37_nl;
  wire[9:0] mux_39_nl;
  wire[2:0] mux_40_nl;

  // Interconnect Declarations for Component Instantiations 
  ball_update_core_fsm ball_update_core_fsm_inst (
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .fsm_output(fsm_output)
    );
  assign and_68_cse = ((~ asn_229_itm) | (if_15_acc_3_itm[5]) | (~ (if_18_acc_3_itm[8])))
      & (fsm_output[0]);
  assign mux_30_nl = MUX_s_1_2_2({not_tmp_18 , (mux1h_6_tmp[0])}, mux1h_6_tmp[1]);
  assign mux_31_nl = MUX_s_1_2_2({((mux1h_6_tmp[1]) | not_tmp_18) , (mux_30_nl)},
      if_25_nor_1_tmp);
  assign and_78_cse = (~ (mux_31_nl)) & (counter_sva[8]) & (counter_sva[11]) & (counter_sva[14])
      & (counter_sva[15]) & (counter_sva[18]) & (~ (mux1h_6_tmp[2]));
  assign and_103_cse = (counter_sva[8]) & (counter_sva[11]) & (counter_sva[14]) &
      (counter_sva[15]) & (counter_sva[18]) & (~ (mux1h_6_tmp[2])) & if_25_nor_1_itm
      & (mux1h_6_tmp[0]) & (~ (mux1h_6_tmp[1]));
  assign mux_43_itm = MUX_s_1_2_2({else_24_land_lpi_1_dfm_mx1w0 , else_24_land_lpi_1_dfm},
      and_103_cse);
  assign nand_3_cse = ~((aif_5_acc_2[10]) & land_5_lpi_1_dfm);
  assign mux1h_6_tmp = MUX1HOT_v_3_3_2({z_out_1 , 3'b1 , state_sva_dfm_12}, {(~((state_sva_dfm_12[2])
      | slc_4_svs)) , ((state_sva_dfm_12[2]) & (~ slc_4_svs)) , slc_4_svs});
  assign nor_tmp_5 = ~(((state_sva_dfm_mx0[2]) & (~((state_sva_dfm_mx0[1]) | (state_sva_dfm_mx0[0]))))
      | equal_tmp);
  assign equal_tmp = (state_sva_dfm_mx0[0]) & (~((state_sva_dfm_mx0[2]) | (state_sva_dfm_mx0[1])));
  assign state_sva_dfm_mx0 = MUX_v_3_2_2({3'b1 , state_sva}, asn_229_itm);
  assign nor_tmp_1 = ~(((state_sva_dfm_mx0[1]) & (state_sva_dfm_mx0[0]) & (~ (state_sva_dfm_mx0[2])))
      | equal_tmp_1);
  assign equal_tmp_1 = (state_sva_dfm_mx0[1]) & (~((state_sva_dfm_mx0[2]) | (state_sva_dfm_mx0[0])));
  assign nl_else_2_if_acc_itm = conv_u2u_6_7(ball_y_sva_dfm_mx0[9:4]) + 7'b1100111;
  assign else_2_if_acc_itm = nl_else_2_if_acc_itm[6:0];
  assign ball_y_sva_dfm_mx0 = MUX_v_10_2_2({10'b11111010 , ball_y_sva}, asn_229_itm);
  assign ball_x_sva_dfm_mx0 = MUX_v_10_2_2({10'b111100000 , ball_x_sva}, asn_229_itm);
  assign right_miss_1_sva_dfm_1_mx0 = (right_miss_1_sva | (signext_2_1(~((if_15_acc_itm[2])
      | (~ (if_15_acc_3_itm[5])))))) & (signext_2_1(~((~ (if_15_acc_itm[2])) & (if_15_acc_3_itm[5]))));
  assign left_miss_1_sva_dfm_1_mx0 = MUX_v_2_2_2({left_miss_1_sva , (z_out_2[1:0])},
      if_15_acc_3_itm[5]);
  assign left_miss_1_sva_dfm_2 = (left_miss_1_sva_dfm_1_mx0 | (signext_2_1(~ (if_18_acc_itm[2]))))
      & (signext_2_1(if_18_acc_itm[2]));
  assign else_20_else_land_lpi_1_dfm = ~(switch2_rsc_mgc_in_wire_d | (~ switch1_rsc_mgc_in_wire_d));
  assign else_20_land_lpi_1_dfm = switch2_rsc_mgc_in_wire_d & (~ switch1_rsc_mgc_in_wire_d);
  assign if_7_land_lpi_1_dfm_mx0w0 = if_7_aif_equal_tmp & (~((({(z_out_3[7:0]) ,
      (ball_x_sva_dfm[1:0])}) != (io_read_vga_xy_rsc_d_cse_sva[9:0])) | (z_out_3[8])));
  assign if_11_land_lpi_1_dfm_mx0w0 = if_7_aif_equal_tmp & (ball_x_sva_dfm == (io_read_vga_xy_rsc_d_cse_sva[9:0]));
  assign else_24_else_else_land_lpi_1_dfm_mx0w0 = (counter_sva[18]) & (counter_sva[15])
      & (counter_sva[14]) & (counter_sva[11]) & (counter_sva[8]) & if_25_nor_1_tmp
      & (mux1h_6_tmp[2]) & (~((mux1h_6_tmp[1]) | (mux1h_6_tmp[0])));
  assign else_24_else_else_land_lpi_1_dfm_mx1 = MUX_s_1_2_2({else_24_else_else_land_lpi_1_dfm_mx0w0
      , else_24_else_else_land_lpi_1_dfm}, and_78_cse | else_24_else_if_and_tmp);
  assign else_24_land_lpi_1_dfm_mx1w0 = (counter_sva[18]) & (counter_sva[15]) & (counter_sva[14])
      & (counter_sva[11]) & (counter_sva[8]) & if_25_nor_1_tmp & (mux1h_6_tmp[1])
      & (~((mux1h_6_tmp[2]) | (mux1h_6_tmp[0])));
  assign if_25_nor_1_tmp = ~((counter_sva[19]) | (counter_sva[17]) | (counter_sva[16])
      | (counter_sva[13]) | (counter_sva[12]) | (counter_sva[10]) | (counter_sva[9])
      | (counter_sva[7]) | (counter_sva[6]) | (counter_sva[5]) | (counter_sva[4])
      | (counter_sva[3]) | (counter_sva[2]) | (counter_sva[1]) | (counter_sva[0]));
  assign mux_20_nl = MUX_v_8_2_2({8'b1111000 , (ball_x_sva[9:2])}, asn_229_itm &
      (~ (if_15_acc_3_itm[5])));
  assign nl_if_18_acc_3_itm = conv_u2u_8_9(mux_20_nl) + 9'b101011011;
  assign if_18_acc_3_itm = nl_if_18_acc_3_itm[8:0];
  assign nl_if_15_acc_3_itm = (ball_x_sva_dfm_mx0[9:4]) + 6'b110001;
  assign if_15_acc_3_itm = nl_if_15_acc_3_itm[5:0];
  assign ball_y_sva_dfm_6_mx0w0 = MUX1HOT_v_10_3_2({(readslicef_11_10_1((({ball_y_sva_dfm_2
      , 1'b1}) + ({7'b1111111 , (~ k_lpi_1_dfm_2) , 1'b1})))) , z_out_4 , ball_y_sva_dfm_2},
      {(land_9_lpi_1_dfm | else_24_else_and_cse) , (and_4_cse | and_31_cse) , and_32_cse});
  assign ball_x_sva_dfm_6_mx0w0 = MUX1HOT_v_10_3_2({(ball_x_sva_dfm_2 + conv_u2u_3_10(k_lpi_1_dfm_2))
      , (readslicef_11_10_1((({ball_x_sva_dfm_2 , 1'b1}) + ({7'b1111111 , (~ k_lpi_1_dfm_2)
      , 1'b1})))) , ball_x_sva_dfm_2}, {(land_9_lpi_1_dfm | and_4_cse) , (and_31_cse
      | else_24_else_and_cse) , and_32_cse});
  assign land_8_lpi_1_dfm = ~(switch2_rsc_mgc_in_wire_d | switch1_rsc_mgc_in_wire_d);
  assign nor_8_m1c = ~((else_2_if_acc_itm[6]) | (if_1_acc_itm[8]));
  assign or_m1c = (nor_tmp_1 & nor_8_m1c) | ((else_2_if_acc_itm[6]) & (~ (if_1_acc_itm[8])))
      | (nor_tmp_5 & (if_1_acc_itm[8]));
  assign nl_if_1_acc_itm = conv_u2u_8_9(ball_y_sva_dfm_mx0[9:2]) + 9'b111011101;
  assign if_1_acc_itm = nl_if_1_acc_itm[8:0];
  assign nl_if_7_acc_6 = conv_u2u_8_9(vga_xy_rsc_mgc_in_wire_d[19:12]) + 9'b110010111;
  assign if_7_acc_6 = nl_if_7_acc_6[8:0];
  assign nl_if_7_acc_8 = conv_u2u_7_8(vga_xy_rsc_mgc_in_wire_d[19:13]) + 8'b11110001;
  assign if_7_acc_8 = nl_if_7_acc_8[7:0];
  assign nl_if_15_acc_itm = ({1'b1 , left_miss_1_sva}) + 3'b1;
  assign if_15_acc_itm = nl_if_15_acc_itm[2:0];
  assign nl_if_18_acc_itm = ({1'b1 , right_miss_1_sva_dfm_1_mx0}) + 3'b1;
  assign if_18_acc_itm = nl_if_18_acc_itm[2:0];
  assign nor_tmp_2 = ~(((state_sva_dfm_4[2]) & (~((state_sva_dfm_4[1]) | (state_sva_dfm_4[0]))))
      | equal_tmp_2);
  assign equal_tmp_2 = (state_sva_dfm_4[1]) & (state_sva_dfm_4[0]) & (~ (state_sva_dfm_4[2]));
  assign if_7_aif_equal_tmp = ball_y_sva_dfm == (io_read_vga_xy_rsc_d_cse_sva[19:10]);
  assign mux1h_3_tmp = MUX1HOT_v_3_3_2({3'b1 , 3'b10 , state_sva_dfm_4}, {(~(equal_tmp_2
      | nor_tmp_2 | nand_tmp)) , (equal_tmp_2 & (~ nand_tmp)) , (nor_tmp_2 | nand_tmp)});
  assign nor_tmp_3 = ~(((mux1h_3_tmp[0]) & (~((mux1h_3_tmp[2]) | (mux1h_3_tmp[1]))))
      | equal_tmp_3);
  assign equal_tmp_3 = (mux1h_3_tmp[1]) & (~((mux1h_3_tmp[2]) | (mux1h_3_tmp[0])));
  assign mux_9_nl = MUX_s_1_2_2({if_11_land_lpi_1_dfm_mx0w0 , if_11_land_lpi_1_dfm},
      nand_3_cse);
  assign nand_2_tmp = ~((mux_9_nl) & (aif_5_acc_2[10]) & land_5_lpi_1_dfm);
  assign mux_7_nl = MUX_s_1_2_2({if_7_land_lpi_1_dfm_mx0w0 , if_7_land_lpi_1_dfm},
      or_dcpl_9);
  assign nand_tmp = ~((mux_7_nl) & (aif_5_acc_2[10]) & land_1_lpi_1_dfm);
  assign nl_acc_itm = ({(conv_u2u_10_11(video_out_rsc_mgc_out_stdreg_d[29:20]) +
      conv_s2u_9_11({1'b1 , (acc_12_sdt_1[14:7])})) , (acc_12_sdt_1[6:0])}) + ({mul_3_itm
      , 1'b1});
  assign acc_itm = nl_acc_itm[17:0];
  assign nl_acc_12_sdt_1 = (z_out[14:0]) + conv_s2s_11_15({1'b1 , (~ (video_out_rsc_mgc_out_stdreg_d[29:20]))});
  assign acc_12_sdt_1 = nl_acc_12_sdt_1[14:0];
  assign nl_aif_5_acc_2 = ({(~ (conv_s2s_3_4(z_out_4[9:7]) + 4'b1)) , (~ (z_out_4[6:0]))})
      + 11'b100101101;
  assign aif_5_acc_2 = nl_aif_5_acc_2[10:0];
  assign state_sva_dfm_10 = MUX1HOT_v_3_3_2({3'b100 , 3'b11 , state_sva_dfm_7}, {nor_12_itm
      , and_18_itm , or_6_itm});
  assign state_sva_dfm_12 = MUX1HOT_v_3_3_2({state_sva_dfm_10 , z_out_2 , 3'b1},
      {(~ slc_3_svs) , ((~ (state_sva_dfm_10[2])) & slc_3_svs) , ((state_sva_dfm_10[2])
      & slc_3_svs)});
  assign else_24_else_if_and_tmp = (counter_sva[18]) & (counter_sva[15]) & (counter_sva[14])
      & (counter_sva[11]) & (counter_sva[8]) & if_25_nor_1_tmp & (mux1h_6_tmp[1])
      & (mux1h_6_tmp[0]) & (~ (mux1h_6_tmp[2]));
  assign land_9_lpi_1_dfm = (counter_sva[18]) & (counter_sva[15]) & (counter_sva[14])
      & (counter_sva[11]) & (counter_sva[8]) & if_25_nor_1_itm & (mux1h_6_tmp[0])
      & (~((mux1h_6_tmp[2]) | (mux1h_6_tmp[1])));
  assign and_4_cse = mux_43_itm & (~ land_9_lpi_1_dfm);
  assign and_31_cse = else_24_else_if_and_tmp & nor_9_m1c;
  assign else_24_else_and_cse = else_24_else_else_land_lpi_1_dfm_mx1 & (~ else_24_else_if_and_tmp)
      & nor_9_m1c;
  assign and_32_cse = (~(else_24_else_else_land_lpi_1_dfm_mx1 | else_24_else_if_and_tmp))
      & nor_9_m1c;
  assign nor_9_m1c = ~(mux_43_itm | land_9_lpi_1_dfm);
  assign and_dcpl_24 = (if_18_acc_3_itm[8]) & (fsm_output[0]);
  assign and_dcpl_25 = (~ (if_18_acc_3_itm[8])) & (fsm_output[0]);
  assign or_dcpl_9 = ~((aif_5_acc_2[10]) & land_1_lpi_1_dfm);
  assign and_67_cse = asn_229_itm & (~ (if_15_acc_3_itm[5])) & and_dcpl_24;
  assign not_tmp_18 = ~((mux1h_6_tmp[0]) & if_25_nor_1_itm);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      state_sva <= 3'b0;
      ball_y_sva_dfm <= 10'b0;
      io_read_vga_xy_rsc_d_cse_sva <= 20'b0;
      ball_x_sva_dfm <= 10'b0;
      mul_3_itm <= 17'b0;
      right_miss_1_sva <= 2'b0;
      left_miss_1_sva <= 2'b0;
      state_sva_dfm_4 <= 3'b0;
      if_7_land_lpi_1_dfm <= 1'b0;
      if_11_land_lpi_1_dfm <= 1'b0;
      ball_y_sva_dfm_2 <= 10'b0;
      k_lpi_1_dfm_2 <= 3'b0;
      ball_x_sva_dfm_2 <= 10'b0;
      else_24_else_else_land_lpi_1_dfm <= 1'b0;
      else_24_land_lpi_1_dfm <= 1'b0;
      counter_sva <= 20'b0;
      right_rsc_mgc_out_stdreg_d <= 3'b0;
      left_rsc_mgc_out_stdreg_d <= 3'b0;
      video_out_rsc_mgc_out_stdreg_d <= 30'b0;
      if_25_nor_1_itm <= 1'b0;
      slc_4_svs <= 1'b0;
      slc_3_svs <= 1'b0;
      ball_y_out_rsc_mgc_out_stdreg_d <= 10'b0;
      ball_x_out_rsc_mgc_out_stdreg_d <= 10'b0;
      land_5_lpi_1_dfm <= 1'b0;
      land_1_lpi_1_dfm <= 1'b0;
      ball_y_sva <= 10'b0;
      ball_x_sva <= 10'b0;
      asn_229_itm <= 1'b0;
      state_sva_dfm_7 <= 3'b0;
      nor_12_itm <= 1'b0;
      and_18_itm <= 1'b0;
      or_6_itm <= 1'b0;
    end
    else begin
      if ( en ) begin
        state_sva <= MUX_v_3_2_2({state_sva , mux1h_6_tmp}, fsm_output[2]);
        ball_y_sva_dfm <= ball_y_sva_dfm_mx0;
        io_read_vga_xy_rsc_d_cse_sva <= vga_xy_rsc_mgc_in_wire_d;
        ball_x_sva_dfm <= ball_x_sva_dfm_mx0;
        mul_3_itm <= z_out;
        right_miss_1_sva <= MUX1HOT_v_2_3_2({right_miss_1_sva_dfm_1_mx0 , (z_out_1[1:0])
            , right_miss_1_sva}, {and_dcpl_24 , and_dcpl_25 , (~ (fsm_output[0]))});
        left_miss_1_sva <= MUX1HOT_v_2_3_2({left_miss_1_sva , (z_out_2[1:0]) , left_miss_1_sva_dfm_2},
            {(~((~((~ (if_15_acc_3_itm[5])) & and_dcpl_24)) & (fsm_output[0]))) ,
            ((if_15_acc_3_itm[5]) & and_dcpl_24) , and_dcpl_25});
        state_sva_dfm_4 <= MUX1HOT_v_3_5_2({3'b100 , 3'b1 , state_sva , 3'b11 , 3'b10},
            {((~(equal_tmp_1 | nor_tmp_1)) & nor_8_m1c) , ((equal_tmp_1 & nor_8_m1c)
            | ((~ asn_229_itm) & or_m1c)) , (asn_229_itm & or_m1c) , ((~(equal_tmp
            | nor_tmp_5)) & (if_1_acc_itm[8])) , (equal_tmp & (if_1_acc_itm[8]))});
        if_7_land_lpi_1_dfm <= MUX_s_1_2_2({if_7_land_lpi_1_dfm_mx0w0 , if_7_land_lpi_1_dfm},
            or_dcpl_9 | (~ (fsm_output[1])));
        if_11_land_lpi_1_dfm <= MUX_s_1_2_2({if_11_land_lpi_1_dfm_mx0w0 , if_11_land_lpi_1_dfm},
            nand_3_cse | (~ (fsm_output[1])));
        ball_y_sva_dfm_2 <= MUX1HOT_v_10_3_2({ball_y_sva , 10'b11111010 , ball_y_sva_dfm_2},
            {and_67_cse , and_68_cse , (~ (fsm_output[0]))});
        k_lpi_1_dfm_2 <= MUX1HOT_v_3_5_2({k_lpi_1_dfm_2 , 3'b100 , 3'b11 , 3'b10
            , 3'b1}, {(~ (fsm_output[0])) , ((~(else_20_else_land_lpi_1_dfm | else_20_land_lpi_1_dfm
            | land_8_lpi_1_dfm)) & (fsm_output[0])) , (else_20_else_land_lpi_1_dfm
            & (~ else_20_land_lpi_1_dfm) & (~ land_8_lpi_1_dfm) & (fsm_output[0]))
            , (else_20_land_lpi_1_dfm & (~ land_8_lpi_1_dfm) & (fsm_output[0])) ,
            (land_8_lpi_1_dfm & (fsm_output[0]))});
        ball_x_sva_dfm_2 <= MUX1HOT_v_10_3_2({ball_x_sva , 10'b111100000 , ball_x_sva_dfm_2},
            {and_67_cse , and_68_cse , (~ (fsm_output[0]))});
        else_24_else_else_land_lpi_1_dfm <= MUX_s_1_2_2({else_24_else_else_land_lpi_1_dfm_mx0w0
            , else_24_else_else_land_lpi_1_dfm}, and_78_cse | else_24_else_if_and_tmp
            | (~ (fsm_output[2])));
        else_24_land_lpi_1_dfm <= MUX_s_1_2_2({else_24_land_lpi_1_dfm , (MUX_s_1_2_2({else_24_land_lpi_1_dfm_mx1w0
            , else_24_land_lpi_1_dfm}, and_103_cse))}, fsm_output[2]);
        counter_sva <= MUX_v_20_2_2({counter_sva , ((counter_sva & (signext_20_1(~
            else_24_else_else_land_lpi_1_dfm_mx0w0)) & (signext_20_1(~ else_24_else_if_and_tmp))
            & (signext_20_1(~ else_24_land_lpi_1_dfm_mx1w0)) & (signext_20_1(~ land_9_lpi_1_dfm)))
            + 20'b1)}, fsm_output[2]);
        right_rsc_mgc_out_stdreg_d <= MUX_v_3_2_2({right_rsc_mgc_out_stdreg_d , ({1'b0
            , (MUX_v_2_2_2({(z_out_1[1:0]) , right_miss_1_sva_dfm_1_mx0}, if_18_acc_3_itm[8]))})},
            fsm_output[0]);
        left_rsc_mgc_out_stdreg_d <= MUX_v_3_2_2({left_rsc_mgc_out_stdreg_d , ({1'b0
            , (MUX_v_2_2_2({left_miss_1_sva_dfm_2 , left_miss_1_sva_dfm_1_mx0}, if_18_acc_3_itm[8]))})},
            fsm_output[0]);
        video_out_rsc_mgc_out_stdreg_d <= MUX_v_30_2_2({video_out_rsc_mgc_out_stdreg_d
            , video_in_rsc_mgc_in_wire_d}, fsm_output[0]);
        if_25_nor_1_itm <= MUX_s_1_2_2({if_25_nor_1_itm , if_25_nor_1_tmp}, fsm_output[0]);
        slc_4_svs <= MUX_s_1_2_2({slc_4_svs , (if_18_acc_3_itm[8])}, fsm_output[0]);
        slc_3_svs <= MUX_s_1_2_2({slc_3_svs , (if_15_acc_3_itm[5])}, fsm_output[0]);
        ball_y_out_rsc_mgc_out_stdreg_d <= MUX_v_10_2_2({ball_y_out_rsc_mgc_out_stdreg_d
            , ball_y_sva_dfm_6_mx0w0}, fsm_output[2]);
        ball_x_out_rsc_mgc_out_stdreg_d <= MUX_v_10_2_2({ball_x_out_rsc_mgc_out_stdreg_d
            , ball_x_sva_dfm_6_mx0w0}, fsm_output[2]);
        land_5_lpi_1_dfm <= (if_7_acc_6[8]) & (~ (if_7_acc_8[7])) & (z_out_3[7])
            & (~ (readslicef_4_1_3((conv_u2u_3_4(vga_xy_rsc_mgc_in_wire_d[9:7]) +
            4'b1011))));
        land_1_lpi_1_dfm <= (if_7_acc_6[8]) & (~ (if_7_acc_8[7])) & (readslicef_7_1_6((conv_u2u_6_7(vga_xy_rsc_mgc_in_wire_d[9:4])
            + 7'b1110001))) & (~ (readslicef_9_1_8((conv_u2u_8_9(vga_xy_rsc_mgc_in_wire_d[9:2])
            + 9'b111001001))));
        ball_y_sva <= MUX_v_10_2_2({ball_y_sva , ball_y_sva_dfm_6_mx0w0}, fsm_output[2]);
        ball_x_sva <= MUX_v_10_2_2({ball_x_sva , ball_x_sva_dfm_6_mx0w0}, fsm_output[2]);
        asn_229_itm <= 1'b1;
        state_sva_dfm_7 <= mux1h_3_tmp;
        nor_12_itm <= ~(equal_tmp_3 | nor_tmp_3 | nand_2_tmp);
        and_18_itm <= equal_tmp_3 & (~ nand_2_tmp);
        or_6_itm <= nor_tmp_3 | nand_2_tmp;
      end
    end
  end
  assign mux_41_nl = MUX_v_10_2_2({(video_in_rsc_mgc_in_wire_d[19:10]) , (video_out_rsc_mgc_out_stdreg_d[9:0])},
      fsm_output[1]);
  assign nl_z_out = conv_s2s_7_17({1'b1 , (fsm_output[1]) , 5'b1011}) * conv_u2s_10_17(mux_41_nl);
  assign z_out = nl_z_out[16:0];
  assign mux_35_nl = MUX_v_2_2_2({(state_sva_dfm_12[1:0]) , ((right_miss_1_sva_dfm_1_mx0
      | (signext_2_1(~ (if_18_acc_itm[2])))) & (signext_2_1(if_18_acc_itm[2])))},
      fsm_output[0]);
  assign nl_z_out_1 = conv_u2u_2_3(mux_35_nl) + 3'b1;
  assign z_out_1 = nl_z_out_1[2:0];
  assign mux_36_nl = MUX_v_2_2_2({(left_miss_1_sva & (signext_2_1(if_15_acc_itm[2])))
      , (state_sva_dfm_10[1:0])}, fsm_output[2]);
  assign nl_z_out_2 = conv_u2u_2_3(mux_36_nl) + 3'b1;
  assign z_out_2 = nl_z_out_2[2:0];
  assign mux_37_nl = MUX_v_8_2_2({({1'b1 , (vga_xy_rsc_mgc_in_wire_d[8:2])}) , (ball_x_sva_dfm[9:2])},
      fsm_output[1]);
  assign nl_z_out_3 = conv_u2u_8_9(mux_37_nl) + conv_s2u_8_9({(fsm_output[1]) , 1'b1
      , (fsm_output[1]) , 5'b11011});
  assign z_out_3 = nl_z_out_3[8:0];
  assign mux_39_nl = MUX_v_10_2_2({ball_y_sva_dfm_2 , (acc_itm[17:8])}, fsm_output[1]);
  assign mux_40_nl = MUX_v_3_2_2({k_lpi_1_dfm_2 , ({2'b0 , (acc_itm[7])})}, fsm_output[1]);
  assign nl_z_out_4 = (mux_39_nl) + conv_u2u_3_10(mux_40_nl);
  assign z_out_4 = nl_z_out_4[9:0];

  function [0:0] MUX_s_1_2_2;
    input [1:0] inputs;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[1:1];
      end
      1'b1 : begin
        result = inputs[0:0];
      end
      default : begin
        result = inputs[1:1];
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function [2:0] MUX1HOT_v_3_3_2;
    input [8:0] inputs;
    input [2:0] sel;
    reg [2:0] result;
    integer i;
  begin
    result = inputs[0+:3] & {3{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*3+:3] & {3{sel[i]}});
    MUX1HOT_v_3_3_2 = result;
  end
  endfunction


  function [2:0] MUX_v_3_2_2;
    input [5:0] inputs;
    input [0:0] sel;
    reg [2:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[5:3];
      end
      1'b1 : begin
        result = inputs[2:0];
      end
      default : begin
        result = inputs[5:3];
      end
    endcase
    MUX_v_3_2_2 = result;
  end
  endfunction


  function [9:0] MUX_v_10_2_2;
    input [19:0] inputs;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[19:10];
      end
      1'b1 : begin
        result = inputs[9:0];
      end
      default : begin
        result = inputs[19:10];
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function [1:0] signext_2_1;
    input [0:0] vector;
  begin
    signext_2_1= {{1{vector[0]}}, vector};
  end
  endfunction


  function [1:0] MUX_v_2_2_2;
    input [3:0] inputs;
    input [0:0] sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[3:2];
      end
      1'b1 : begin
        result = inputs[1:0];
      end
      default : begin
        result = inputs[3:2];
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function [7:0] MUX_v_8_2_2;
    input [15:0] inputs;
    input [0:0] sel;
    reg [7:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[15:8];
      end
      1'b1 : begin
        result = inputs[7:0];
      end
      default : begin
        result = inputs[15:8];
      end
    endcase
    MUX_v_8_2_2 = result;
  end
  endfunction


  function [9:0] MUX1HOT_v_10_3_2;
    input [29:0] inputs;
    input [2:0] sel;
    reg [9:0] result;
    integer i;
  begin
    result = inputs[0+:10] & {10{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*10+:10] & {10{sel[i]}});
    MUX1HOT_v_10_3_2 = result;
  end
  endfunction


  function [9:0] readslicef_11_10_1;
    input [10:0] vector;
    reg [10:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_11_10_1 = tmp[9:0];
  end
  endfunction


  function [1:0] MUX1HOT_v_2_3_2;
    input [5:0] inputs;
    input [2:0] sel;
    reg [1:0] result;
    integer i;
  begin
    result = inputs[0+:2] & {2{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*2+:2] & {2{sel[i]}});
    MUX1HOT_v_2_3_2 = result;
  end
  endfunction


  function [2:0] MUX1HOT_v_3_5_2;
    input [14:0] inputs;
    input [4:0] sel;
    reg [2:0] result;
    integer i;
  begin
    result = inputs[0+:3] & {3{sel[0]}};
    for( i = 1; i < 5; i = i + 1 )
      result = result | (inputs[i*3+:3] & {3{sel[i]}});
    MUX1HOT_v_3_5_2 = result;
  end
  endfunction


  function [19:0] MUX_v_20_2_2;
    input [39:0] inputs;
    input [0:0] sel;
    reg [19:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[39:20];
      end
      1'b1 : begin
        result = inputs[19:0];
      end
      default : begin
        result = inputs[39:20];
      end
    endcase
    MUX_v_20_2_2 = result;
  end
  endfunction


  function [19:0] signext_20_1;
    input [0:0] vector;
  begin
    signext_20_1= {{19{vector[0]}}, vector};
  end
  endfunction


  function [29:0] MUX_v_30_2_2;
    input [59:0] inputs;
    input [0:0] sel;
    reg [29:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[59:30];
      end
      1'b1 : begin
        result = inputs[29:0];
      end
      default : begin
        result = inputs[59:30];
      end
    endcase
    MUX_v_30_2_2 = result;
  end
  endfunction


  function [0:0] readslicef_4_1_3;
    input [3:0] vector;
    reg [3:0] tmp;
  begin
    tmp = vector >> 3;
    readslicef_4_1_3 = tmp[0:0];
  end
  endfunction


  function [0:0] readslicef_7_1_6;
    input [6:0] vector;
    reg [6:0] tmp;
  begin
    tmp = vector >> 6;
    readslicef_7_1_6 = tmp[0:0];
  end
  endfunction


  function [0:0] readslicef_9_1_8;
    input [8:0] vector;
    reg [8:0] tmp;
  begin
    tmp = vector >> 8;
    readslicef_9_1_8 = tmp[0:0];
  end
  endfunction


  function  [6:0] conv_u2u_6_7 ;
    input [5:0]  vector ;
  begin
    conv_u2u_6_7 = {1'b0, vector};
  end
  endfunction


  function  [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction


  function  [9:0] conv_u2u_3_10 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_10 = {{7{1'b0}}, vector};
  end
  endfunction


  function  [7:0] conv_u2u_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_8 = {1'b0, vector};
  end
  endfunction


  function  [10:0] conv_u2u_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_11 = {1'b0, vector};
  end
  endfunction


  function  [10:0] conv_s2u_9_11 ;
    input signed [8:0]  vector ;
  begin
    conv_s2u_9_11 = {{2{vector[8]}}, vector};
  end
  endfunction


  function signed [14:0] conv_s2s_11_15 ;
    input signed [10:0]  vector ;
  begin
    conv_s2s_11_15 = {{4{vector[10]}}, vector};
  end
  endfunction


  function signed [3:0] conv_s2s_3_4 ;
    input signed [2:0]  vector ;
  begin
    conv_s2s_3_4 = {vector[2], vector};
  end
  endfunction


  function  [3:0] conv_u2u_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_4 = {1'b0, vector};
  end
  endfunction


  function signed [16:0] conv_s2s_7_17 ;
    input signed [6:0]  vector ;
  begin
    conv_s2s_7_17 = {{10{vector[6]}}, vector};
  end
  endfunction


  function signed [16:0] conv_u2s_10_17 ;
    input [9:0]  vector ;
  begin
    conv_u2s_10_17 = {{7{1'b0}}, vector};
  end
  endfunction


  function  [2:0] conv_u2u_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_3 = {1'b0, vector};
  end
  endfunction


  function  [8:0] conv_s2u_8_9 ;
    input signed [7:0]  vector ;
  begin
    conv_s2u_8_9 = {vector[7], vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    ball_update
//  Generated from file(s):
//    2) $PROJECT_HOME/May12_ball_update.c
// ------------------------------------------------------------------


module ball_update (
  video_in_rsc_z, vga_xy_rsc_z, video_out_rsc_z, ball_x_out_rsc_z, ball_y_out_rsc_z,
      switch1_rsc_z, switch2_rsc_z, left_rsc_z, right_rsc_z, clk, en, arst_n
);
  input [29:0] video_in_rsc_z;
  input [19:0] vga_xy_rsc_z;
  output [29:0] video_out_rsc_z;
  output [9:0] ball_x_out_rsc_z;
  output [9:0] ball_y_out_rsc_z;
  input switch1_rsc_z;
  input switch2_rsc_z;
  output [2:0] left_rsc_z;
  output [2:0] right_rsc_z;
  input clk;
  input en;
  input arst_n;


  // Interconnect Declarations
  wire [29:0] video_in_rsc_mgc_in_wire_d;
  wire [19:0] vga_xy_rsc_mgc_in_wire_d;
  wire [29:0] video_out_rsc_mgc_out_stdreg_d;
  wire [9:0] ball_x_out_rsc_mgc_out_stdreg_d;
  wire [9:0] ball_y_out_rsc_mgc_out_stdreg_d;
  wire switch1_rsc_mgc_in_wire_d;
  wire switch2_rsc_mgc_in_wire_d;
  wire [2:0] left_rsc_mgc_out_stdreg_d;
  wire [2:0] right_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_wire #(.rscid(1),
  .width(30)) video_in_rsc_mgc_in_wire (
      .d(video_in_rsc_mgc_in_wire_d),
      .z(video_in_rsc_z)
    );
  mgc_in_wire #(.rscid(2),
  .width(20)) vga_xy_rsc_mgc_in_wire (
      .d(vga_xy_rsc_mgc_in_wire_d),
      .z(vga_xy_rsc_z)
    );
  mgc_out_stdreg #(.rscid(3),
  .width(30)) video_out_rsc_mgc_out_stdreg (
      .d(video_out_rsc_mgc_out_stdreg_d),
      .z(video_out_rsc_z)
    );
  mgc_out_stdreg #(.rscid(4),
  .width(10)) ball_x_out_rsc_mgc_out_stdreg (
      .d(ball_x_out_rsc_mgc_out_stdreg_d),
      .z(ball_x_out_rsc_z)
    );
  mgc_out_stdreg #(.rscid(5),
  .width(10)) ball_y_out_rsc_mgc_out_stdreg (
      .d(ball_y_out_rsc_mgc_out_stdreg_d),
      .z(ball_y_out_rsc_z)
    );
  mgc_in_wire #(.rscid(6),
  .width(1)) switch1_rsc_mgc_in_wire (
      .d(switch1_rsc_mgc_in_wire_d),
      .z(switch1_rsc_z)
    );
  mgc_in_wire #(.rscid(7),
  .width(1)) switch2_rsc_mgc_in_wire (
      .d(switch2_rsc_mgc_in_wire_d),
      .z(switch2_rsc_z)
    );
  mgc_out_stdreg #(.rscid(8),
  .width(3)) left_rsc_mgc_out_stdreg (
      .d(left_rsc_mgc_out_stdreg_d),
      .z(left_rsc_z)
    );
  mgc_out_stdreg #(.rscid(9),
  .width(3)) right_rsc_mgc_out_stdreg (
      .d(right_rsc_mgc_out_stdreg_d),
      .z(right_rsc_z)
    );
  ball_update_core ball_update_core_inst (
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .video_in_rsc_mgc_in_wire_d(video_in_rsc_mgc_in_wire_d),
      .vga_xy_rsc_mgc_in_wire_d(vga_xy_rsc_mgc_in_wire_d),
      .video_out_rsc_mgc_out_stdreg_d(video_out_rsc_mgc_out_stdreg_d),
      .ball_x_out_rsc_mgc_out_stdreg_d(ball_x_out_rsc_mgc_out_stdreg_d),
      .ball_y_out_rsc_mgc_out_stdreg_d(ball_y_out_rsc_mgc_out_stdreg_d),
      .switch1_rsc_mgc_in_wire_d(switch1_rsc_mgc_in_wire_d),
      .switch2_rsc_mgc_in_wire_d(switch2_rsc_mgc_in_wire_d),
      .left_rsc_mgc_out_stdreg_d(left_rsc_mgc_out_stdreg_d),
      .right_rsc_mgc_out_stdreg_d(right_rsc_mgc_out_stdreg_d)
    );
endmodule



