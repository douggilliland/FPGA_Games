puts {-- Note: Precision Synthesis Started}

proc get_state { args } {
   set state {}
   catch {
      set impl [get_impl_property -name]
      set psi [open $impl/${impl}.psi r]
      while {[gets $psi line] >= 0} {
            if {[regexp -- "PROP key='statename' .*value='(.+)'" $line du state]} {
                  break
            }
      }
      close $psi
   }
   set state
}
proc run_setup { args } {
   ## Setup Project
   new_project -name psr_v -folder . -createimpl_name psr_v_impl -force
   set_project_property -usetempdir false
   set_input_dir .
   setup_design -var "analyze_extra_options=-override -keeplast"

   ## Add source HDL files
   add_input_file {{H:/Pong Master Folder/Catapult_6/ball_update.v2/rtl_mgc_ioport.v}} -format verilog
   add_input_file {{H:/Pong Master Folder/Catapult_6/ball_update.v2/rtl_mgc_ioport_v2001.v}} -format verilog
   add_input_file {{H:/Pong Master Folder/Catapult_6/ball_update.v2/rtl.v}} -format verilog
   setup_design -design=ball_update

   ## Setup global frequence
   setup_design -frequency 50.0

   ## Setup technology settings
   setup_design -manufacturer Altera -family {Cyclone III} -part EP3C16F484C -speed 6
   setup_design -variable bumpup_device=true
   setup_design -addio=true
   setup_design -edif=true
   setup_design -retiming=false

if {[string compare [lindex [split [get_version] .] 0] "2010a"] >= 0} {
setup_place_and_route -flow "Quartus II Modular" -command "Integrated Place and Route" -ba_format Verilog
}

   ## Add timing constraint file
   add_input_file ./rtl.v.psr_timing -format SDC

   save_project
}

proc run_mapped { args } {
   ## Synthesize design
   puts "-- Starting synthesis for design 'ball_update': [clock format [clock seconds]]"
   compile

   # When a clock is not detected (e.g. combinational designs) Precision RTL
   # creates the fake clock "Design_Clock" with the period corresponding to the frequency
   # setting in the setup_design.

   ## IO TIMING CONSTRAINTS
   set hls_design_clk [lindex [concat [find_clocks -top] [all_clocks]] 0]
   # These constraints prevent the 'No initialized timing analysis; 
   # cannot define a Clock.' error message in combinational designs
   set_input_delay 0.0 -clock $hls_design_clk [all_inputs]
   set_output_delay 0.0 -clock $hls_design_clk [all_outputs]

   synthesize
   puts "-- Synthesis finished for design 'ball_update': [clock format [clock seconds]]"

   puts "-- BlockMulUnit (from /LIBS/mgc_Altera-Cyclone-III-6_beh_psr/MODS/mgc_mul/BINDINGS/all/PROPERTY_MAPPING/BlockMulUnit): 160.0"
   puts "-- BlockMulUnit (from /LIBS/mgc_Altera-Cyclone-III-6_beh_psr/MODS/mgc_mul_pipe/BINDINGS/all/PROPERTY_MAPPING/BlockMulUnit): 160.0"

   puts "-- Characterization mode: p2p "

   # Gather area and timing information
   puts "-- Synthesis area report for design 'ball_update'"
   report_area -cell_usage
   puts "-- END Synthesis area report for design 'ball_update'"

   puts "-- Synthesis input_to_output:timing report for design 'ball_update' '0' 'INOUT' port 'en' '3' 'OUT' port 'video_out_rsc_z'"
   set_max_delay 20.000000 -design rtl -from en -to video_out_rsc_z(29:0)
   report_timing -from en -to video_out_rsc_z(29:0) -num_paths 1 -detail 
   puts "-- END Synthesis input_to_output:timing report for design 'ball_update' '0' 'INOUT' port 'en' '3' 'OUT' port 'video_out_rsc_z'"

   puts "-- Synthesis input_to_output:timing report for design 'ball_update' '0' 'INOUT' port 'en' '4' 'OUT' port 'ball_x_out_rsc_z'"
   set_max_delay 20.000000 -design rtl -from en -to ball_x_out_rsc_z(9:0)
   report_timing -from en -to ball_x_out_rsc_z(9:0) -num_paths 1 -detail 
   puts "-- END Synthesis input_to_output:timing report for design 'ball_update' '0' 'INOUT' port 'en' '4' 'OUT' port 'ball_x_out_rsc_z'"

   puts "-- Synthesis input_to_output:timing report for design 'ball_update' '0' 'INOUT' port 'en' '5' 'OUT' port 'ball_y_out_rsc_z'"
   set_max_delay 20.000000 -design rtl -from en -to ball_y_out_rsc_z(9:0)
   report_timing -from en -to ball_y_out_rsc_z(9:0) -num_paths 1 -detail 
   puts "-- END Synthesis input_to_output:timing report for design 'ball_update' '0' 'INOUT' port 'en' '5' 'OUT' port 'ball_y_out_rsc_z'"

   puts "-- Synthesis input_to_output:timing report for design 'ball_update' '0' 'INOUT' port 'en' '8' 'OUT' port 'left_rsc_z'"
   set_max_delay 20.000000 -design rtl -from en -to left_rsc_z(2:0)
   report_timing -from en -to left_rsc_z(2:0) -num_paths 1 -detail 
   puts "-- END Synthesis input_to_output:timing report for design 'ball_update' '0' 'INOUT' port 'en' '8' 'OUT' port 'left_rsc_z'"

   puts "-- Synthesis input_to_output:timing report for design 'ball_update' '0' 'INOUT' port 'en' '9' 'OUT' port 'right_rsc_z'"
   set_max_delay 20.000000 -design rtl -from en -to right_rsc_z(2:0)
   report_timing -from en -to right_rsc_z(2:0) -num_paths 1 -detail 
   puts "-- END Synthesis input_to_output:timing report for design 'ball_update' '0' 'INOUT' port 'en' '9' 'OUT' port 'right_rsc_z'"

   puts "-- Synthesis input_to_output:timing report for design 'ball_update' '1' 'IN' port 'video_in_rsc_z' '3' 'OUT' port 'video_out_rsc_z'"
   set_max_delay 20.000000 -design rtl -from video_in_rsc_z(29:0) -to video_out_rsc_z(29:0)
   report_timing -from video_in_rsc_z(29:0) -to video_out_rsc_z(29:0) -num_paths 1 -detail 
   puts "-- END Synthesis input_to_output:timing report for design 'ball_update' '1' 'IN' port 'video_in_rsc_z' '3' 'OUT' port 'video_out_rsc_z'"

   puts "-- Synthesis input_to_output:timing report for design 'ball_update' '1' 'IN' port 'video_in_rsc_z' '4' 'OUT' port 'ball_x_out_rsc_z'"
   set_max_delay 20.000000 -design rtl -from video_in_rsc_z(29:0) -to ball_x_out_rsc_z(9:0)
   report_timing -from video_in_rsc_z(29:0) -to ball_x_out_rsc_z(9:0) -num_paths 1 -detail 
   puts "-- END Synthesis input_to_output:timing report for design 'ball_update' '1' 'IN' port 'video_in_rsc_z' '4' 'OUT' port 'ball_x_out_rsc_z'"

   puts "-- Synthesis input_to_output:timing report for design 'ball_update' '1' 'IN' port 'video_in_rsc_z' '5' 'OUT' port 'ball_y_out_rsc_z'"
   set_max_delay 20.000000 -design rtl -from video_in_rsc_z(29:0) -to ball_y_out_rsc_z(9:0)
   report_timing -from video_in_rsc_z(29:0) -to ball_y_out_rsc_z(9:0) -num_paths 1 -detail 
   puts "-- END Synthesis input_to_output:timing report for design 'ball_update' '1' 'IN' port 'video_in_rsc_z' '5' 'OUT' port 'ball_y_out_rsc_z'"

   puts "-- Synthesis input_to_output:timing report for design 'ball_update' '1' 'IN' port 'video_in_rsc_z' '8' 'OUT' port 'left_rsc_z'"
   set_max_delay 20.000000 -design rtl -from video_in_rsc_z(29:0) -to left_rsc_z(2:0)
   report_timing -from video_in_rsc_z(29:0) -to left_rsc_z(2:0) -num_paths 1 -detail 
   puts "-- END Synthesis input_to_output:timing report for design 'ball_update' '1' 'IN' port 'video_in_rsc_z' '8' 'OUT' port 'left_rsc_z'"

   puts "-- Synthesis input_to_output:timing report for design 'ball_update' '1' 'IN' port 'video_in_rsc_z' '9' 'OUT' port 'right_rsc_z'"
   set_max_delay 20.000000 -design rtl -from video_in_rsc_z(29:0) -to right_rsc_z(2:0)
   report_timing -from video_in_rsc_z(29:0) -to right_rsc_z(2:0) -num_paths 1 -detail 
   puts "-- END Synthesis input_to_output:timing report for design 'ball_update' '1' 'IN' port 'video_in_rsc_z' '9' 'OUT' port 'right_rsc_z'"

   puts "-- Synthesis input_to_output:timing report for design 'ball_update' '2' 'IN' port 'vga_xy_rsc_z' '3' 'OUT' port 'video_out_rsc_z'"
   set_max_delay 20.000000 -design rtl -from vga_xy_rsc_z(19:0) -to video_out_rsc_z(29:0)
   report_timing -from vga_xy_rsc_z(19:0) -to video_out_rsc_z(29:0) -num_paths 1 -detail 
   puts "-- END Synthesis input_to_output:timing report for design 'ball_update' '2' 'IN' port 'vga_xy_rsc_z' '3' 'OUT' port 'video_out_rsc_z'"

   puts "-- Synthesis input_to_output:timing report for design 'ball_update' '2' 'IN' port 'vga_xy_rsc_z' '4' 'OUT' port 'ball_x_out_rsc_z'"
   set_max_delay 20.000000 -design rtl -from vga_xy_rsc_z(19:0) -to ball_x_out_rsc_z(9:0)
   report_timing -from vga_xy_rsc_z(19:0) -to ball_x_out_rsc_z(9:0) -num_paths 1 -detail 
   puts "-- END Synthesis input_to_output:timing report for design 'ball_update' '2' 'IN' port 'vga_xy_rsc_z' '4' 'OUT' port 'ball_x_out_rsc_z'"

   puts "-- Synthesis input_to_output:timing report for design 'ball_update' '2' 'IN' port 'vga_xy_rsc_z' '5' 'OUT' port 'ball_y_out_rsc_z'"
   set_max_delay 20.000000 -design rtl -from vga_xy_rsc_z(19:0) -to ball_y_out_rsc_z(9:0)
   report_timing -from vga_xy_rsc_z(19:0) -to ball_y_out_rsc_z(9:0) -num_paths 1 -detail 
   puts "-- END Synthesis input_to_output:timing report for design 'ball_update' '2' 'IN' port 'vga_xy_rsc_z' '5' 'OUT' port 'ball_y_out_rsc_z'"

   puts "-- Synthesis input_to_output:timing report for design 'ball_update' '2' 'IN' port 'vga_xy_rsc_z' '8' 'OUT' port 'left_rsc_z'"
   set_max_delay 20.000000 -design rtl -from vga_xy_rsc_z(19:0) -to left_rsc_z(2:0)
   report_timing -from vga_xy_rsc_z(19:0) -to left_rsc_z(2:0) -num_paths 1 -detail 
   puts "-- END Synthesis input_to_output:timing report for design 'ball_update' '2' 'IN' port 'vga_xy_rsc_z' '8' 'OUT' port 'left_rsc_z'"

   puts "-- Synthesis input_to_output:timing report for design 'ball_update' '2' 'IN' port 'vga_xy_rsc_z' '9' 'OUT' port 'right_rsc_z'"
   set_max_delay 20.000000 -design rtl -from vga_xy_rsc_z(19:0) -to right_rsc_z(2:0)
   report_timing -from vga_xy_rsc_z(19:0) -to right_rsc_z(2:0) -num_paths 1 -detail 
   puts "-- END Synthesis input_to_output:timing report for design 'ball_update' '2' 'IN' port 'vga_xy_rsc_z' '9' 'OUT' port 'right_rsc_z'"

   puts "-- Synthesis input_to_output:timing report for design 'ball_update' '6' 'IN' port 'switch1_rsc_z' '3' 'OUT' port 'video_out_rsc_z'"
   set_max_delay 20.000000 -design rtl -from switch1_rsc_z -to video_out_rsc_z(29:0)
   report_timing -from switch1_rsc_z -to video_out_rsc_z(29:0) -num_paths 1 -detail 
   puts "-- END Synthesis input_to_output:timing report for design 'ball_update' '6' 'IN' port 'switch1_rsc_z' '3' 'OUT' port 'video_out_rsc_z'"

   puts "-- Synthesis input_to_output:timing report for design 'ball_update' '6' 'IN' port 'switch1_rsc_z' '4' 'OUT' port 'ball_x_out_rsc_z'"
   set_max_delay 20.000000 -design rtl -from switch1_rsc_z -to ball_x_out_rsc_z(9:0)
   report_timing -from switch1_rsc_z -to ball_x_out_rsc_z(9:0) -num_paths 1 -detail 
   puts "-- END Synthesis input_to_output:timing report for design 'ball_update' '6' 'IN' port 'switch1_rsc_z' '4' 'OUT' port 'ball_x_out_rsc_z'"

   puts "-- Synthesis input_to_output:timing report for design 'ball_update' '6' 'IN' port 'switch1_rsc_z' '5' 'OUT' port 'ball_y_out_rsc_z'"
   set_max_delay 20.000000 -design rtl -from switch1_rsc_z -to ball_y_out_rsc_z(9:0)
   report_timing -from switch1_rsc_z -to ball_y_out_rsc_z(9:0) -num_paths 1 -detail 
   puts "-- END Synthesis input_to_output:timing report for design 'ball_update' '6' 'IN' port 'switch1_rsc_z' '5' 'OUT' port 'ball_y_out_rsc_z'"

   puts "-- Synthesis input_to_output:timing report for design 'ball_update' '6' 'IN' port 'switch1_rsc_z' '8' 'OUT' port 'left_rsc_z'"
   set_max_delay 20.000000 -design rtl -from switch1_rsc_z -to left_rsc_z(2:0)
   report_timing -from switch1_rsc_z -to left_rsc_z(2:0) -num_paths 1 -detail 
   puts "-- END Synthesis input_to_output:timing report for design 'ball_update' '6' 'IN' port 'switch1_rsc_z' '8' 'OUT' port 'left_rsc_z'"

   puts "-- Synthesis input_to_output:timing report for design 'ball_update' '6' 'IN' port 'switch1_rsc_z' '9' 'OUT' port 'right_rsc_z'"
   set_max_delay 20.000000 -design rtl -from switch1_rsc_z -to right_rsc_z(2:0)
   report_timing -from switch1_rsc_z -to right_rsc_z(2:0) -num_paths 1 -detail 
   puts "-- END Synthesis input_to_output:timing report for design 'ball_update' '6' 'IN' port 'switch1_rsc_z' '9' 'OUT' port 'right_rsc_z'"

   puts "-- Synthesis input_to_output:timing report for design 'ball_update' '7' 'IN' port 'switch2_rsc_z' '3' 'OUT' port 'video_out_rsc_z'"
   set_max_delay 20.000000 -design rtl -from switch2_rsc_z -to video_out_rsc_z(29:0)
   report_timing -from switch2_rsc_z -to video_out_rsc_z(29:0) -num_paths 1 -detail 
   puts "-- END Synthesis input_to_output:timing report for design 'ball_update' '7' 'IN' port 'switch2_rsc_z' '3' 'OUT' port 'video_out_rsc_z'"

   puts "-- Synthesis input_to_output:timing report for design 'ball_update' '7' 'IN' port 'switch2_rsc_z' '4' 'OUT' port 'ball_x_out_rsc_z'"
   set_max_delay 20.000000 -design rtl -from switch2_rsc_z -to ball_x_out_rsc_z(9:0)
   report_timing -from switch2_rsc_z -to ball_x_out_rsc_z(9:0) -num_paths 1 -detail 
   puts "-- END Synthesis input_to_output:timing report for design 'ball_update' '7' 'IN' port 'switch2_rsc_z' '4' 'OUT' port 'ball_x_out_rsc_z'"

   puts "-- Synthesis input_to_output:timing report for design 'ball_update' '7' 'IN' port 'switch2_rsc_z' '5' 'OUT' port 'ball_y_out_rsc_z'"
   set_max_delay 20.000000 -design rtl -from switch2_rsc_z -to ball_y_out_rsc_z(9:0)
   report_timing -from switch2_rsc_z -to ball_y_out_rsc_z(9:0) -num_paths 1 -detail 
   puts "-- END Synthesis input_to_output:timing report for design 'ball_update' '7' 'IN' port 'switch2_rsc_z' '5' 'OUT' port 'ball_y_out_rsc_z'"

   puts "-- Synthesis input_to_output:timing report for design 'ball_update' '7' 'IN' port 'switch2_rsc_z' '8' 'OUT' port 'left_rsc_z'"
   set_max_delay 20.000000 -design rtl -from switch2_rsc_z -to left_rsc_z(2:0)
   report_timing -from switch2_rsc_z -to left_rsc_z(2:0) -num_paths 1 -detail 
   puts "-- END Synthesis input_to_output:timing report for design 'ball_update' '7' 'IN' port 'switch2_rsc_z' '8' 'OUT' port 'left_rsc_z'"

   puts "-- Synthesis input_to_output:timing report for design 'ball_update' '7' 'IN' port 'switch2_rsc_z' '9' 'OUT' port 'right_rsc_z'"
   set_max_delay 20.000000 -design rtl -from switch2_rsc_z -to right_rsc_z(2:0)
   report_timing -from switch2_rsc_z -to right_rsc_z(2:0) -num_paths 1 -detail 
   puts "-- END Synthesis input_to_output:timing report for design 'ball_update' '7' 'IN' port 'switch2_rsc_z' '9' 'OUT' port 'right_rsc_z'"


   set regs_clk [all_registers -clock {clk}]
   if { [llength ${regs_clk} ] > 0 } {
      puts "-- Synthesis input_to_register:timing report for design 'ball_update' '0' 'INOUT' port 'en' '0' 'INOUT' CLOCK 'clk'"
      set_input_delay -design rtl -clock clk 0.0 en
      report_timing -from en -to $regs_clk -num_paths 1 -detail 
      puts "-- END Synthesis input_to_register:timing report for design 'ball_update' '0' 'INOUT' port 'en' '0' 'INOUT' CLOCK 'clk'"

      puts "-- Synthesis input_to_register:timing report for design 'ball_update' '1' 'IN' port 'video_in_rsc_z' '0' 'INOUT' CLOCK 'clk'"
      set_input_delay -design rtl -clock clk 0.0 video_in_rsc_z(29:0)
      report_timing -from video_in_rsc_z(29:0) -to $regs_clk -num_paths 1 -detail 
      puts "-- END Synthesis input_to_register:timing report for design 'ball_update' '1' 'IN' port 'video_in_rsc_z' '0' 'INOUT' CLOCK 'clk'"

      puts "-- Synthesis input_to_register:timing report for design 'ball_update' '2' 'IN' port 'vga_xy_rsc_z' '0' 'INOUT' CLOCK 'clk'"
      set_input_delay -design rtl -clock clk 0.0 vga_xy_rsc_z(19:0)
      report_timing -from vga_xy_rsc_z(19:0) -to $regs_clk -num_paths 1 -detail 
      puts "-- END Synthesis input_to_register:timing report for design 'ball_update' '2' 'IN' port 'vga_xy_rsc_z' '0' 'INOUT' CLOCK 'clk'"

      puts "-- Synthesis input_to_register:timing report for design 'ball_update' '6' 'IN' port 'switch1_rsc_z' '0' 'INOUT' CLOCK 'clk'"
      set_input_delay -design rtl -clock clk 0.0 switch1_rsc_z
      report_timing -from switch1_rsc_z -to $regs_clk -num_paths 1 -detail 
      puts "-- END Synthesis input_to_register:timing report for design 'ball_update' '6' 'IN' port 'switch1_rsc_z' '0' 'INOUT' CLOCK 'clk'"

      puts "-- Synthesis input_to_register:timing report for design 'ball_update' '7' 'IN' port 'switch2_rsc_z' '0' 'INOUT' CLOCK 'clk'"
      set_input_delay -design rtl -clock clk 0.0 switch2_rsc_z
      report_timing -from switch2_rsc_z -to $regs_clk -num_paths 1 -detail 
      puts "-- END Synthesis input_to_register:timing report for design 'ball_update' '7' 'IN' port 'switch2_rsc_z' '0' 'INOUT' CLOCK 'clk'"

      # this workaround ensures that there is a input delay for the cases
      # where Precision does not have a complete timing model for a particular device
      # the reported value is used if no other input delay value is reported
      #puts "-- Synthesis input_to_register:timing report for design 'ball_update' '0' 'INOUT' port 'clk' '0' 'INOUT' CLOCK 'clk'"
      #report_timing -from clk -to [all_registers -clock {clk}] -num_paths 1 -detail 
      #puts "-- END Synthesis input_to_register:timing report for design 'ball_update' '0' 'INOUT' port 'clk' '0' 'INOUT' CLOCK 'clk'"
   }

   set regs_en [all_registers -clock {en}]
   if { [llength ${regs_en} ] > 0 } {
      puts "-- Synthesis input_to_register:timing report for design 'ball_update' '1' 'IN' port 'video_in_rsc_z' '0' 'INOUT' CLOCK 'en'"
      set_input_delay -design rtl -clock en 0.0 video_in_rsc_z(29:0)
      report_timing -from video_in_rsc_z(29:0) -to $regs_en -num_paths 1 -detail 
      puts "-- END Synthesis input_to_register:timing report for design 'ball_update' '1' 'IN' port 'video_in_rsc_z' '0' 'INOUT' CLOCK 'en'"

      puts "-- Synthesis input_to_register:timing report for design 'ball_update' '2' 'IN' port 'vga_xy_rsc_z' '0' 'INOUT' CLOCK 'en'"
      set_input_delay -design rtl -clock en 0.0 vga_xy_rsc_z(19:0)
      report_timing -from vga_xy_rsc_z(19:0) -to $regs_en -num_paths 1 -detail 
      puts "-- END Synthesis input_to_register:timing report for design 'ball_update' '2' 'IN' port 'vga_xy_rsc_z' '0' 'INOUT' CLOCK 'en'"

      puts "-- Synthesis input_to_register:timing report for design 'ball_update' '6' 'IN' port 'switch1_rsc_z' '0' 'INOUT' CLOCK 'en'"
      set_input_delay -design rtl -clock en 0.0 switch1_rsc_z
      report_timing -from switch1_rsc_z -to $regs_en -num_paths 1 -detail 
      puts "-- END Synthesis input_to_register:timing report for design 'ball_update' '6' 'IN' port 'switch1_rsc_z' '0' 'INOUT' CLOCK 'en'"

      puts "-- Synthesis input_to_register:timing report for design 'ball_update' '7' 'IN' port 'switch2_rsc_z' '0' 'INOUT' CLOCK 'en'"
      set_input_delay -design rtl -clock en 0.0 switch2_rsc_z
      report_timing -from switch2_rsc_z -to $regs_en -num_paths 1 -detail 
      puts "-- END Synthesis input_to_register:timing report for design 'ball_update' '7' 'IN' port 'switch2_rsc_z' '0' 'INOUT' CLOCK 'en'"

      # this workaround ensures that there is a input delay for the cases
      # where Precision does not have a complete timing model for a particular device
      # the reported value is used if no other input delay value is reported
      #puts "-- Synthesis input_to_register:timing report for design 'ball_update' '0' 'INOUT' port 'en' '0' 'INOUT' CLOCK 'en'"
      #report_timing -from en -to [all_registers -clock {en}] -num_paths 1 -detail 
      #puts "-- END Synthesis input_to_register:timing report for design 'ball_update' '0' 'INOUT' port 'en' '0' 'INOUT' CLOCK 'en'"
   }

   set regs_switch1_rsc_z [all_registers -clock {switch1_rsc_z}]
   if { [llength ${regs_switch1_rsc_z} ] > 0 } {
      puts "-- Synthesis input_to_register:timing report for design 'ball_update' '0' 'INOUT' port 'en' '6' 'IN' CLOCK 'switch1_rsc_z'"
      set_input_delay -design rtl -clock switch1_rsc_z 0.0 en
      report_timing -from en -to $regs_switch1_rsc_z -num_paths 1 -detail 
      puts "-- END Synthesis input_to_register:timing report for design 'ball_update' '0' 'INOUT' port 'en' '6' 'IN' CLOCK 'switch1_rsc_z'"

      puts "-- Synthesis input_to_register:timing report for design 'ball_update' '1' 'IN' port 'video_in_rsc_z' '6' 'IN' CLOCK 'switch1_rsc_z'"
      set_input_delay -design rtl -clock switch1_rsc_z 0.0 video_in_rsc_z(29:0)
      report_timing -from video_in_rsc_z(29:0) -to $regs_switch1_rsc_z -num_paths 1 -detail 
      puts "-- END Synthesis input_to_register:timing report for design 'ball_update' '1' 'IN' port 'video_in_rsc_z' '6' 'IN' CLOCK 'switch1_rsc_z'"

      puts "-- Synthesis input_to_register:timing report for design 'ball_update' '2' 'IN' port 'vga_xy_rsc_z' '6' 'IN' CLOCK 'switch1_rsc_z'"
      set_input_delay -design rtl -clock switch1_rsc_z 0.0 vga_xy_rsc_z(19:0)
      report_timing -from vga_xy_rsc_z(19:0) -to $regs_switch1_rsc_z -num_paths 1 -detail 
      puts "-- END Synthesis input_to_register:timing report for design 'ball_update' '2' 'IN' port 'vga_xy_rsc_z' '6' 'IN' CLOCK 'switch1_rsc_z'"

      puts "-- Synthesis input_to_register:timing report for design 'ball_update' '7' 'IN' port 'switch2_rsc_z' '6' 'IN' CLOCK 'switch1_rsc_z'"
      set_input_delay -design rtl -clock switch1_rsc_z 0.0 switch2_rsc_z
      report_timing -from switch2_rsc_z -to $regs_switch1_rsc_z -num_paths 1 -detail 
      puts "-- END Synthesis input_to_register:timing report for design 'ball_update' '7' 'IN' port 'switch2_rsc_z' '6' 'IN' CLOCK 'switch1_rsc_z'"

      # this workaround ensures that there is a input delay for the cases
      # where Precision does not have a complete timing model for a particular device
      # the reported value is used if no other input delay value is reported
      #puts "-- Synthesis input_to_register:timing report for design 'ball_update' '6' 'IN' port 'switch1_rsc_z' '6' 'IN' CLOCK 'switch1_rsc_z'"
      #report_timing -from switch1_rsc_z -to [all_registers -clock {switch1_rsc_z}] -num_paths 1 -detail 
      #puts "-- END Synthesis input_to_register:timing report for design 'ball_update' '6' 'IN' port 'switch1_rsc_z' '6' 'IN' CLOCK 'switch1_rsc_z'"
   }

   set regs_switch2_rsc_z [all_registers -clock {switch2_rsc_z}]
   if { [llength ${regs_switch2_rsc_z} ] > 0 } {
      puts "-- Synthesis input_to_register:timing report for design 'ball_update' '0' 'INOUT' port 'en' '7' 'IN' CLOCK 'switch2_rsc_z'"
      set_input_delay -design rtl -clock switch2_rsc_z 0.0 en
      report_timing -from en -to $regs_switch2_rsc_z -num_paths 1 -detail 
      puts "-- END Synthesis input_to_register:timing report for design 'ball_update' '0' 'INOUT' port 'en' '7' 'IN' CLOCK 'switch2_rsc_z'"

      puts "-- Synthesis input_to_register:timing report for design 'ball_update' '1' 'IN' port 'video_in_rsc_z' '7' 'IN' CLOCK 'switch2_rsc_z'"
      set_input_delay -design rtl -clock switch2_rsc_z 0.0 video_in_rsc_z(29:0)
      report_timing -from video_in_rsc_z(29:0) -to $regs_switch2_rsc_z -num_paths 1 -detail 
      puts "-- END Synthesis input_to_register:timing report for design 'ball_update' '1' 'IN' port 'video_in_rsc_z' '7' 'IN' CLOCK 'switch2_rsc_z'"

      puts "-- Synthesis input_to_register:timing report for design 'ball_update' '2' 'IN' port 'vga_xy_rsc_z' '7' 'IN' CLOCK 'switch2_rsc_z'"
      set_input_delay -design rtl -clock switch2_rsc_z 0.0 vga_xy_rsc_z(19:0)
      report_timing -from vga_xy_rsc_z(19:0) -to $regs_switch2_rsc_z -num_paths 1 -detail 
      puts "-- END Synthesis input_to_register:timing report for design 'ball_update' '2' 'IN' port 'vga_xy_rsc_z' '7' 'IN' CLOCK 'switch2_rsc_z'"

      puts "-- Synthesis input_to_register:timing report for design 'ball_update' '6' 'IN' port 'switch1_rsc_z' '7' 'IN' CLOCK 'switch2_rsc_z'"
      set_input_delay -design rtl -clock switch2_rsc_z 0.0 switch1_rsc_z
      report_timing -from switch1_rsc_z -to $regs_switch2_rsc_z -num_paths 1 -detail 
      puts "-- END Synthesis input_to_register:timing report for design 'ball_update' '6' 'IN' port 'switch1_rsc_z' '7' 'IN' CLOCK 'switch2_rsc_z'"

      # this workaround ensures that there is a input delay for the cases
      # where Precision does not have a complete timing model for a particular device
      # the reported value is used if no other input delay value is reported
      #puts "-- Synthesis input_to_register:timing report for design 'ball_update' '7' 'IN' port 'switch2_rsc_z' '7' 'IN' CLOCK 'switch2_rsc_z'"
      #report_timing -from switch2_rsc_z -to [all_registers -clock {switch2_rsc_z}] -num_paths 1 -detail 
      #puts "-- END Synthesis input_to_register:timing report for design 'ball_update' '7' 'IN' port 'switch2_rsc_z' '7' 'IN' CLOCK 'switch2_rsc_z'"
   }

      set regsi_clk [all_registers -clock {clk}]
      set regso_clk [all_registers -clock {clk}]
      if { [llength ${regsi_clk} ] > 0 && [llength ${regso_clk} ] > 0 } {
         puts "-- Synthesis register_to_register:timing report for design 'ball_update' '0' 'INOUT' CLOCK 'clk' '0' 'INOUT' CLOCK 'clk'"
         report_timing -from ${regs_clk} -to ${regs_clk} -num_paths 1 -detail 
         puts "-- END Synthesis register_to_register:timing report for design 'ball_update' '0' 'INOUT' CLOCK 'clk' '0' 'INOUT' CLOCK 'clk'"
      }

      set regsi_clk [all_registers -clock {clk}]
      set regso_en [all_registers -clock {en}]
      if { [llength ${regsi_clk} ] > 0 && [llength ${regso_en} ] > 0 } {
         puts "-- Synthesis register_to_register:timing report for design 'ball_update' '0' 'INOUT' CLOCK 'clk' '0' 'INOUT' CLOCK 'en'"
         report_timing -from ${regs_clk} -to ${regs_en} -num_paths 1 -detail 
         puts "-- END Synthesis register_to_register:timing report for design 'ball_update' '0' 'INOUT' CLOCK 'clk' '0' 'INOUT' CLOCK 'en'"
      }

      set regsi_clk [all_registers -clock {clk}]
      set regso_switch1_rsc_z [all_registers -clock {switch1_rsc_z}]
      if { [llength ${regsi_clk} ] > 0 && [llength ${regso_switch1_rsc_z} ] > 0 } {
         puts "-- Synthesis register_to_register:timing report for design 'ball_update' '0' 'INOUT' CLOCK 'clk' '6' 'IN' CLOCK 'switch1_rsc_z'"
         report_timing -from ${regs_clk} -to ${regs_switch1_rsc_z} -num_paths 1 -detail 
         puts "-- END Synthesis register_to_register:timing report for design 'ball_update' '0' 'INOUT' CLOCK 'clk' '6' 'IN' CLOCK 'switch1_rsc_z'"
      }

      set regsi_clk [all_registers -clock {clk}]
      set regso_switch2_rsc_z [all_registers -clock {switch2_rsc_z}]
      if { [llength ${regsi_clk} ] > 0 && [llength ${regso_switch2_rsc_z} ] > 0 } {
         puts "-- Synthesis register_to_register:timing report for design 'ball_update' '0' 'INOUT' CLOCK 'clk' '7' 'IN' CLOCK 'switch2_rsc_z'"
         report_timing -from ${regs_clk} -to ${regs_switch2_rsc_z} -num_paths 1 -detail 
         puts "-- END Synthesis register_to_register:timing report for design 'ball_update' '0' 'INOUT' CLOCK 'clk' '7' 'IN' CLOCK 'switch2_rsc_z'"
      }

      set regsi_en [all_registers -clock {en}]
      set regso_clk [all_registers -clock {clk}]
      if { [llength ${regsi_en} ] > 0 && [llength ${regso_clk} ] > 0 } {
         puts "-- Synthesis register_to_register:timing report for design 'ball_update' '0' 'INOUT' CLOCK 'en' '0' 'INOUT' CLOCK 'clk'"
         report_timing -from ${regs_en} -to ${regs_clk} -num_paths 1 -detail 
         puts "-- END Synthesis register_to_register:timing report for design 'ball_update' '0' 'INOUT' CLOCK 'en' '0' 'INOUT' CLOCK 'clk'"
      }

      set regsi_en [all_registers -clock {en}]
      set regso_en [all_registers -clock {en}]
      if { [llength ${regsi_en} ] > 0 && [llength ${regso_en} ] > 0 } {
         puts "-- Synthesis register_to_register:timing report for design 'ball_update' '0' 'INOUT' CLOCK 'en' '0' 'INOUT' CLOCK 'en'"
         report_timing -from ${regs_en} -to ${regs_en} -num_paths 1 -detail 
         puts "-- END Synthesis register_to_register:timing report for design 'ball_update' '0' 'INOUT' CLOCK 'en' '0' 'INOUT' CLOCK 'en'"
      }

      set regsi_en [all_registers -clock {en}]
      set regso_switch1_rsc_z [all_registers -clock {switch1_rsc_z}]
      if { [llength ${regsi_en} ] > 0 && [llength ${regso_switch1_rsc_z} ] > 0 } {
         puts "-- Synthesis register_to_register:timing report for design 'ball_update' '0' 'INOUT' CLOCK 'en' '6' 'IN' CLOCK 'switch1_rsc_z'"
         report_timing -from ${regs_en} -to ${regs_switch1_rsc_z} -num_paths 1 -detail 
         puts "-- END Synthesis register_to_register:timing report for design 'ball_update' '0' 'INOUT' CLOCK 'en' '6' 'IN' CLOCK 'switch1_rsc_z'"
      }

      set regsi_en [all_registers -clock {en}]
      set regso_switch2_rsc_z [all_registers -clock {switch2_rsc_z}]
      if { [llength ${regsi_en} ] > 0 && [llength ${regso_switch2_rsc_z} ] > 0 } {
         puts "-- Synthesis register_to_register:timing report for design 'ball_update' '0' 'INOUT' CLOCK 'en' '7' 'IN' CLOCK 'switch2_rsc_z'"
         report_timing -from ${regs_en} -to ${regs_switch2_rsc_z} -num_paths 1 -detail 
         puts "-- END Synthesis register_to_register:timing report for design 'ball_update' '0' 'INOUT' CLOCK 'en' '7' 'IN' CLOCK 'switch2_rsc_z'"
      }

      set regsi_switch1_rsc_z [all_registers -clock {switch1_rsc_z}]
      set regso_clk [all_registers -clock {clk}]
      if { [llength ${regsi_switch1_rsc_z} ] > 0 && [llength ${regso_clk} ] > 0 } {
         puts "-- Synthesis register_to_register:timing report for design 'ball_update' '6' 'IN' CLOCK 'switch1_rsc_z' '0' 'INOUT' CLOCK 'clk'"
         report_timing -from ${regs_switch1_rsc_z} -to ${regs_clk} -num_paths 1 -detail 
         puts "-- END Synthesis register_to_register:timing report for design 'ball_update' '6' 'IN' CLOCK 'switch1_rsc_z' '0' 'INOUT' CLOCK 'clk'"
      }

      set regsi_switch1_rsc_z [all_registers -clock {switch1_rsc_z}]
      set regso_en [all_registers -clock {en}]
      if { [llength ${regsi_switch1_rsc_z} ] > 0 && [llength ${regso_en} ] > 0 } {
         puts "-- Synthesis register_to_register:timing report for design 'ball_update' '6' 'IN' CLOCK 'switch1_rsc_z' '0' 'INOUT' CLOCK 'en'"
         report_timing -from ${regs_switch1_rsc_z} -to ${regs_en} -num_paths 1 -detail 
         puts "-- END Synthesis register_to_register:timing report for design 'ball_update' '6' 'IN' CLOCK 'switch1_rsc_z' '0' 'INOUT' CLOCK 'en'"
      }

      set regsi_switch1_rsc_z [all_registers -clock {switch1_rsc_z}]
      set regso_switch1_rsc_z [all_registers -clock {switch1_rsc_z}]
      if { [llength ${regsi_switch1_rsc_z} ] > 0 && [llength ${regso_switch1_rsc_z} ] > 0 } {
         puts "-- Synthesis register_to_register:timing report for design 'ball_update' '6' 'IN' CLOCK 'switch1_rsc_z' '6' 'IN' CLOCK 'switch1_rsc_z'"
         report_timing -from ${regs_switch1_rsc_z} -to ${regs_switch1_rsc_z} -num_paths 1 -detail 
         puts "-- END Synthesis register_to_register:timing report for design 'ball_update' '6' 'IN' CLOCK 'switch1_rsc_z' '6' 'IN' CLOCK 'switch1_rsc_z'"
      }

      set regsi_switch1_rsc_z [all_registers -clock {switch1_rsc_z}]
      set regso_switch2_rsc_z [all_registers -clock {switch2_rsc_z}]
      if { [llength ${regsi_switch1_rsc_z} ] > 0 && [llength ${regso_switch2_rsc_z} ] > 0 } {
         puts "-- Synthesis register_to_register:timing report for design 'ball_update' '6' 'IN' CLOCK 'switch1_rsc_z' '7' 'IN' CLOCK 'switch2_rsc_z'"
         report_timing -from ${regs_switch1_rsc_z} -to ${regs_switch2_rsc_z} -num_paths 1 -detail 
         puts "-- END Synthesis register_to_register:timing report for design 'ball_update' '6' 'IN' CLOCK 'switch1_rsc_z' '7' 'IN' CLOCK 'switch2_rsc_z'"
      }

      set regsi_switch2_rsc_z [all_registers -clock {switch2_rsc_z}]
      set regso_clk [all_registers -clock {clk}]
      if { [llength ${regsi_switch2_rsc_z} ] > 0 && [llength ${regso_clk} ] > 0 } {
         puts "-- Synthesis register_to_register:timing report for design 'ball_update' '7' 'IN' CLOCK 'switch2_rsc_z' '0' 'INOUT' CLOCK 'clk'"
         report_timing -from ${regs_switch2_rsc_z} -to ${regs_clk} -num_paths 1 -detail 
         puts "-- END Synthesis register_to_register:timing report for design 'ball_update' '7' 'IN' CLOCK 'switch2_rsc_z' '0' 'INOUT' CLOCK 'clk'"
      }

      set regsi_switch2_rsc_z [all_registers -clock {switch2_rsc_z}]
      set regso_en [all_registers -clock {en}]
      if { [llength ${regsi_switch2_rsc_z} ] > 0 && [llength ${regso_en} ] > 0 } {
         puts "-- Synthesis register_to_register:timing report for design 'ball_update' '7' 'IN' CLOCK 'switch2_rsc_z' '0' 'INOUT' CLOCK 'en'"
         report_timing -from ${regs_switch2_rsc_z} -to ${regs_en} -num_paths 1 -detail 
         puts "-- END Synthesis register_to_register:timing report for design 'ball_update' '7' 'IN' CLOCK 'switch2_rsc_z' '0' 'INOUT' CLOCK 'en'"
      }

      set regsi_switch2_rsc_z [all_registers -clock {switch2_rsc_z}]
      set regso_switch1_rsc_z [all_registers -clock {switch1_rsc_z}]
      if { [llength ${regsi_switch2_rsc_z} ] > 0 && [llength ${regso_switch1_rsc_z} ] > 0 } {
         puts "-- Synthesis register_to_register:timing report for design 'ball_update' '7' 'IN' CLOCK 'switch2_rsc_z' '6' 'IN' CLOCK 'switch1_rsc_z'"
         report_timing -from ${regs_switch2_rsc_z} -to ${regs_switch1_rsc_z} -num_paths 1 -detail 
         puts "-- END Synthesis register_to_register:timing report for design 'ball_update' '7' 'IN' CLOCK 'switch2_rsc_z' '6' 'IN' CLOCK 'switch1_rsc_z'"
      }

      set regsi_switch2_rsc_z [all_registers -clock {switch2_rsc_z}]
      set regso_switch2_rsc_z [all_registers -clock {switch2_rsc_z}]
      if { [llength ${regsi_switch2_rsc_z} ] > 0 && [llength ${regso_switch2_rsc_z} ] > 0 } {
         puts "-- Synthesis register_to_register:timing report for design 'ball_update' '7' 'IN' CLOCK 'switch2_rsc_z' '7' 'IN' CLOCK 'switch2_rsc_z'"
         report_timing -from ${regs_switch2_rsc_z} -to ${regs_switch2_rsc_z} -num_paths 1 -detail 
         puts "-- END Synthesis register_to_register:timing report for design 'ball_update' '7' 'IN' CLOCK 'switch2_rsc_z' '7' 'IN' CLOCK 'switch2_rsc_z'"
      }

   set regs_clk [all_registers -clock {clk}]
   if { [llength ${regs_clk} ] > 0 } {
      puts "-- Synthesis register_to_output:timing report for design 'ball_update' '0' 'INOUT' CLOCK 'clk' '3' 'OUT' port 'video_out_rsc_z'"
      set_output_delay -design rtl -clock clk 0.0 video_out_rsc_z(29:0)
      report_timing -from [all_registers -clock clk] -to video_out_rsc_z(29:0) -num_paths 1 -detail 
      puts "-- END Synthesis register_to_output:timing report for design 'ball_update' '0' 'INOUT' CLOCK 'clk' '3' 'OUT' port 'video_out_rsc_z'"
      puts "-- Synthesis register_to_output:timing report for design 'ball_update' '0' 'INOUT' CLOCK 'clk' '4' 'OUT' port 'ball_x_out_rsc_z'"
      set_output_delay -design rtl -clock clk 0.0 ball_x_out_rsc_z(9:0)
      report_timing -from [all_registers -clock clk] -to ball_x_out_rsc_z(9:0) -num_paths 1 -detail 
      puts "-- END Synthesis register_to_output:timing report for design 'ball_update' '0' 'INOUT' CLOCK 'clk' '4' 'OUT' port 'ball_x_out_rsc_z'"
      puts "-- Synthesis register_to_output:timing report for design 'ball_update' '0' 'INOUT' CLOCK 'clk' '5' 'OUT' port 'ball_y_out_rsc_z'"
      set_output_delay -design rtl -clock clk 0.0 ball_y_out_rsc_z(9:0)
      report_timing -from [all_registers -clock clk] -to ball_y_out_rsc_z(9:0) -num_paths 1 -detail 
      puts "-- END Synthesis register_to_output:timing report for design 'ball_update' '0' 'INOUT' CLOCK 'clk' '5' 'OUT' port 'ball_y_out_rsc_z'"
      puts "-- Synthesis register_to_output:timing report for design 'ball_update' '0' 'INOUT' CLOCK 'clk' '8' 'OUT' port 'left_rsc_z'"
      set_output_delay -design rtl -clock clk 0.0 left_rsc_z(2:0)
      report_timing -from [all_registers -clock clk] -to left_rsc_z(2:0) -num_paths 1 -detail 
      puts "-- END Synthesis register_to_output:timing report for design 'ball_update' '0' 'INOUT' CLOCK 'clk' '8' 'OUT' port 'left_rsc_z'"
      puts "-- Synthesis register_to_output:timing report for design 'ball_update' '0' 'INOUT' CLOCK 'clk' '9' 'OUT' port 'right_rsc_z'"
      set_output_delay -design rtl -clock clk 0.0 right_rsc_z(2:0)
      report_timing -from [all_registers -clock clk] -to right_rsc_z(2:0) -num_paths 1 -detail 
      puts "-- END Synthesis register_to_output:timing report for design 'ball_update' '0' 'INOUT' CLOCK 'clk' '9' 'OUT' port 'right_rsc_z'"
   }

   set regs_en [all_registers -clock {en}]
   if { [llength ${regs_en} ] > 0 } {
      puts "-- Synthesis register_to_output:timing report for design 'ball_update' '0' 'INOUT' CLOCK 'en' '3' 'OUT' port 'video_out_rsc_z'"
      set_output_delay -design rtl -clock en 0.0 video_out_rsc_z(29:0)
      report_timing -from [all_registers -clock en] -to video_out_rsc_z(29:0) -num_paths 1 -detail 
      puts "-- END Synthesis register_to_output:timing report for design 'ball_update' '0' 'INOUT' CLOCK 'en' '3' 'OUT' port 'video_out_rsc_z'"
      puts "-- Synthesis register_to_output:timing report for design 'ball_update' '0' 'INOUT' CLOCK 'en' '4' 'OUT' port 'ball_x_out_rsc_z'"
      set_output_delay -design rtl -clock en 0.0 ball_x_out_rsc_z(9:0)
      report_timing -from [all_registers -clock en] -to ball_x_out_rsc_z(9:0) -num_paths 1 -detail 
      puts "-- END Synthesis register_to_output:timing report for design 'ball_update' '0' 'INOUT' CLOCK 'en' '4' 'OUT' port 'ball_x_out_rsc_z'"
      puts "-- Synthesis register_to_output:timing report for design 'ball_update' '0' 'INOUT' CLOCK 'en' '5' 'OUT' port 'ball_y_out_rsc_z'"
      set_output_delay -design rtl -clock en 0.0 ball_y_out_rsc_z(9:0)
      report_timing -from [all_registers -clock en] -to ball_y_out_rsc_z(9:0) -num_paths 1 -detail 
      puts "-- END Synthesis register_to_output:timing report for design 'ball_update' '0' 'INOUT' CLOCK 'en' '5' 'OUT' port 'ball_y_out_rsc_z'"
      puts "-- Synthesis register_to_output:timing report for design 'ball_update' '0' 'INOUT' CLOCK 'en' '8' 'OUT' port 'left_rsc_z'"
      set_output_delay -design rtl -clock en 0.0 left_rsc_z(2:0)
      report_timing -from [all_registers -clock en] -to left_rsc_z(2:0) -num_paths 1 -detail 
      puts "-- END Synthesis register_to_output:timing report for design 'ball_update' '0' 'INOUT' CLOCK 'en' '8' 'OUT' port 'left_rsc_z'"
      puts "-- Synthesis register_to_output:timing report for design 'ball_update' '0' 'INOUT' CLOCK 'en' '9' 'OUT' port 'right_rsc_z'"
      set_output_delay -design rtl -clock en 0.0 right_rsc_z(2:0)
      report_timing -from [all_registers -clock en] -to right_rsc_z(2:0) -num_paths 1 -detail 
      puts "-- END Synthesis register_to_output:timing report for design 'ball_update' '0' 'INOUT' CLOCK 'en' '9' 'OUT' port 'right_rsc_z'"
   }

   set regs_switch1_rsc_z [all_registers -clock {switch1_rsc_z}]
   if { [llength ${regs_switch1_rsc_z} ] > 0 } {
      puts "-- Synthesis register_to_output:timing report for design 'ball_update' '6' 'IN' CLOCK 'switch1_rsc_z' '3' 'OUT' port 'video_out_rsc_z'"
      set_output_delay -design rtl -clock switch1_rsc_z 0.0 video_out_rsc_z(29:0)
      report_timing -from [all_registers -clock switch1_rsc_z] -to video_out_rsc_z(29:0) -num_paths 1 -detail 
      puts "-- END Synthesis register_to_output:timing report for design 'ball_update' '6' 'IN' CLOCK 'switch1_rsc_z' '3' 'OUT' port 'video_out_rsc_z'"
      puts "-- Synthesis register_to_output:timing report for design 'ball_update' '6' 'IN' CLOCK 'switch1_rsc_z' '4' 'OUT' port 'ball_x_out_rsc_z'"
      set_output_delay -design rtl -clock switch1_rsc_z 0.0 ball_x_out_rsc_z(9:0)
      report_timing -from [all_registers -clock switch1_rsc_z] -to ball_x_out_rsc_z(9:0) -num_paths 1 -detail 
      puts "-- END Synthesis register_to_output:timing report for design 'ball_update' '6' 'IN' CLOCK 'switch1_rsc_z' '4' 'OUT' port 'ball_x_out_rsc_z'"
      puts "-- Synthesis register_to_output:timing report for design 'ball_update' '6' 'IN' CLOCK 'switch1_rsc_z' '5' 'OUT' port 'ball_y_out_rsc_z'"
      set_output_delay -design rtl -clock switch1_rsc_z 0.0 ball_y_out_rsc_z(9:0)
      report_timing -from [all_registers -clock switch1_rsc_z] -to ball_y_out_rsc_z(9:0) -num_paths 1 -detail 
      puts "-- END Synthesis register_to_output:timing report for design 'ball_update' '6' 'IN' CLOCK 'switch1_rsc_z' '5' 'OUT' port 'ball_y_out_rsc_z'"
      puts "-- Synthesis register_to_output:timing report for design 'ball_update' '6' 'IN' CLOCK 'switch1_rsc_z' '8' 'OUT' port 'left_rsc_z'"
      set_output_delay -design rtl -clock switch1_rsc_z 0.0 left_rsc_z(2:0)
      report_timing -from [all_registers -clock switch1_rsc_z] -to left_rsc_z(2:0) -num_paths 1 -detail 
      puts "-- END Synthesis register_to_output:timing report for design 'ball_update' '6' 'IN' CLOCK 'switch1_rsc_z' '8' 'OUT' port 'left_rsc_z'"
      puts "-- Synthesis register_to_output:timing report for design 'ball_update' '6' 'IN' CLOCK 'switch1_rsc_z' '9' 'OUT' port 'right_rsc_z'"
      set_output_delay -design rtl -clock switch1_rsc_z 0.0 right_rsc_z(2:0)
      report_timing -from [all_registers -clock switch1_rsc_z] -to right_rsc_z(2:0) -num_paths 1 -detail 
      puts "-- END Synthesis register_to_output:timing report for design 'ball_update' '6' 'IN' CLOCK 'switch1_rsc_z' '9' 'OUT' port 'right_rsc_z'"
   }

   set regs_switch2_rsc_z [all_registers -clock {switch2_rsc_z}]
   if { [llength ${regs_switch2_rsc_z} ] > 0 } {
      puts "-- Synthesis register_to_output:timing report for design 'ball_update' '7' 'IN' CLOCK 'switch2_rsc_z' '3' 'OUT' port 'video_out_rsc_z'"
      set_output_delay -design rtl -clock switch2_rsc_z 0.0 video_out_rsc_z(29:0)
      report_timing -from [all_registers -clock switch2_rsc_z] -to video_out_rsc_z(29:0) -num_paths 1 -detail 
      puts "-- END Synthesis register_to_output:timing report for design 'ball_update' '7' 'IN' CLOCK 'switch2_rsc_z' '3' 'OUT' port 'video_out_rsc_z'"
      puts "-- Synthesis register_to_output:timing report for design 'ball_update' '7' 'IN' CLOCK 'switch2_rsc_z' '4' 'OUT' port 'ball_x_out_rsc_z'"
      set_output_delay -design rtl -clock switch2_rsc_z 0.0 ball_x_out_rsc_z(9:0)
      report_timing -from [all_registers -clock switch2_rsc_z] -to ball_x_out_rsc_z(9:0) -num_paths 1 -detail 
      puts "-- END Synthesis register_to_output:timing report for design 'ball_update' '7' 'IN' CLOCK 'switch2_rsc_z' '4' 'OUT' port 'ball_x_out_rsc_z'"
      puts "-- Synthesis register_to_output:timing report for design 'ball_update' '7' 'IN' CLOCK 'switch2_rsc_z' '5' 'OUT' port 'ball_y_out_rsc_z'"
      set_output_delay -design rtl -clock switch2_rsc_z 0.0 ball_y_out_rsc_z(9:0)
      report_timing -from [all_registers -clock switch2_rsc_z] -to ball_y_out_rsc_z(9:0) -num_paths 1 -detail 
      puts "-- END Synthesis register_to_output:timing report for design 'ball_update' '7' 'IN' CLOCK 'switch2_rsc_z' '5' 'OUT' port 'ball_y_out_rsc_z'"
      puts "-- Synthesis register_to_output:timing report for design 'ball_update' '7' 'IN' CLOCK 'switch2_rsc_z' '8' 'OUT' port 'left_rsc_z'"
      set_output_delay -design rtl -clock switch2_rsc_z 0.0 left_rsc_z(2:0)
      report_timing -from [all_registers -clock switch2_rsc_z] -to left_rsc_z(2:0) -num_paths 1 -detail 
      puts "-- END Synthesis register_to_output:timing report for design 'ball_update' '7' 'IN' CLOCK 'switch2_rsc_z' '8' 'OUT' port 'left_rsc_z'"
      puts "-- Synthesis register_to_output:timing report for design 'ball_update' '7' 'IN' CLOCK 'switch2_rsc_z' '9' 'OUT' port 'right_rsc_z'"
      set_output_delay -design rtl -clock switch2_rsc_z 0.0 right_rsc_z(2:0)
      report_timing -from [all_registers -clock switch2_rsc_z] -to right_rsc_z(2:0) -num_paths 1 -detail 
      puts "-- END Synthesis register_to_output:timing report for design 'ball_update' '7' 'IN' CLOCK 'switch2_rsc_z' '9' 'OUT' port 'right_rsc_z'"
   }

   save_project
}

proc remove_sdf_annotate { infile outfile } {
   if { ![file exists $infile] }  {
      puts "Error - input file $infile not found"
      return
   }
   set s [open $infile "r"]
   set d [open $outfile "w"]
   while { ! [eof $s] } {
      gets $s line
      if { [string match "*\$sdf_annotate*" $line] == 0 } {
         puts $d $line
      }
   }
   close $s
   close $d
}

proc vendor_vars { vendor tech lang stage } {
   # returns a list { netlist_output_directory netlist_file_suffix sdf_file_suffix sdf_inst sim_opts }
      set SDFINST ""
      switch -glob -- "${vendor}-${tech}" {
         "Xilinx*" {
            if { $stage == "gate" } {
               set SDFINST scverify_top/rtl
            }
            if { $lang == "vhdl" } {
               return [list VNDR_NETDIR . VNDR_NETSUF _out.vhd VNDR_SDFSUF _out.sdf VNDR_SDFINST $SDFINST]
            } else {
               return [list VLOG_OPTS \$(XILINX)/verilog/src/glbl.v SIM_OPTS glbl VNDR_NETDIR . VNDR_NETSUF _out.v VNDR_SDFSUF _out.sdf VNDR_SDFINST $SDFINST]
            }
         }
         "Altera*" {
            if { $stage == "gate" } {
               set SDFINST scverify_top/rtl
            }
            if { $lang == "vhdl" } {
               return [list VNDR_NETDIR simulation/modelsim VNDR_NETSUF .vho VNDR_SDFSUF _vhd.sdo VNDR_SDFINST $SDFINST]
            } else {
               return [list VNDR_NETDIR simulation/modelsim VNDR_NETSUF .vo VNDR_SDFSUF _v.sdo VNDR_SDFINST $SDFINST]
            }
         }
      }
   }
proc run_gate { args } {
   puts "PROC run_gate $args - enable_run_pnr=1"
   place_and_route cl
   save_project
   puts "-- Synthesis design report for design 'ball_update'"
   puts "-- Implementation directory: [MGS_Core::get_design_impls -active]"
   puts "-- END Synthesis design report for design 'ball_update'"
}

proc run_flow { argv } {
   global gui_mode
   array set db $argv
   if {[info exists db(-run_state)]} {
       set db(run_state) $db(-run_state)
   }
   if {![info exists db(run_state)]} {
       set db(run_state) {mapped}
   }

   if {$db(run_state) == {setup} || ![file exists ./psr_v.psp] || [catch {open_project ./psr_v.psp}]} {
       run_setup
   }
   # verify that addio option is correct in the project
   if { [string is true [report_project -addio]] != [string is true true] } {
       puts "Note: Adjusting -addio constraint to true for proper mapped/gate simulation"
       setup_design -addio=true
       compile
       run_mapped
   }
   if {$db(run_state) == {setup}} return

   if {![info exists db(gui_mode)] || !$db(gui_mode) } {
       set cstate [get_state]
       if {$cstate != {synthesized} && $cstate != {pnr} } run_mapped
       if {$db(run_state) == {mapped}} {
          set mapped_netlist [file join H:/PONGMA~1/Catapult_6/ball_update.v2 mapped.v]
          puts "-- Writing mapped netlist for 'ball_update' to file '$mapped_netlist'"
          auto_write $mapped_netlist
          return
       }

       if {[get_state] != {pnr}} run_gate
       if {$db(run_state) == {gate}} {
          set gate_netlist [file join H:/PONGMA~1/Catapult_6/ball_update.v2 gate.v]
          set gate_sdf [file join H:/PONGMA~1/Catapult_6/ball_update.v2 gate.v.sdf]
          set IMPL_DIR [MGS_Core::get_design_impls -active]
          set DESIGNNAME [report_project -basename]
          set vendor [report_project -manufacturer]
          set tech [report_project -libname]
          set lang v
          set vendor_var_list [vendor_vars $vendor $tech $lang "gate"]
          foreach { vname vval } $vendor_var_list {
             set $vname $vval
          }
          set NETLIST_FILE ${IMPL_DIR}/${VNDR_NETDIR}/${DESIGNNAME}${VNDR_NETSUF}
          if { $lang == "v" } {
             puts "Copying vendor netlist '$NETLIST_FILE' to '$gate_netlist'"
             remove_sdf_annotate $NETLIST_FILE $gate_netlist
          } else {
             puts "Copying vendor netlist '$NETLIST_FILE' to '$gate_netlist'"
             file copy -force $NETLIST_FILE $gate_netlist
          }
          set NETLIST_SDF ${IMPL_DIR}/${VNDR_NETDIR}/${DESIGNNAME}${VNDR_SDFSUF}
          puts "Copying SDF file '$NETLIST_SDF' to '$gate_sdf'"
          file copy -force $NETLIST_SDF $gate_sdf
          return
       }

   }
}
run_flow [expr {[info exists argv]?$argv:{}}]
