--lpm_abs CARRY_CHAIN="MANUAL" DEVICE_FAMILY="Cyclone V" IGNORE_CARRY_BUFFERS="OFF" LPM_WIDTH=32 data result
--VERSION_BEGIN 17.0 cbx_cycloneii 2017:04:25:18:06:29:SJ cbx_lpm_abs 2017:04:25:18:06:29:SJ cbx_lpm_add_sub 2017:04:25:18:06:29:SJ cbx_mgl 2017:04:25:18:09:28:SJ cbx_nadder 2017:04:25:18:06:30:SJ cbx_stratix 2017:04:25:18:06:30:SJ cbx_stratixii 2017:04:25:18:06:30:SJ cbx_util_mgl 2017:04:25:18:06:30:SJ  VERSION_END


-- Copyright (C) 2017  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Intel and sold by Intel or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.



--synthesis_resources = lut 32 
SUBDESIGN lpm_abs_4p9
( 
	data[31..0]	:	input;
	overflow	:	output;
	result[31..0]	:	output;
) 
VARIABLE
	adder_result_int[32..0]	:	WIRE;
	adder_cin	:	WIRE;
	adder_dataa[31..0]	:	WIRE;
	adder_datab[31..0]	:	WIRE;
	adder_result[31..0]	:	WIRE;
	gnd_wire	: WIRE;
	result_tmp[31..0]	: WIRE;

BEGIN 
	adder_result_int[] = (adder_dataa[], adder_cin) + (adder_datab[], adder_cin);
	adder_result[] = adder_result_int[32..1];
	adder_cin = data[31..31];
	adder_dataa[] = (data[] $ data[31..31]);
	adder_datab[] = ( gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire);
	gnd_wire = B"0";
	overflow = (result_tmp[31..31] & data[31..31]);
	result[] = result_tmp[];
	result_tmp[] = adder_result[];
END;
--VALID FILE
