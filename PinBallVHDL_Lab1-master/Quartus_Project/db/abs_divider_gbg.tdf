--abs_divider DEN_REPRESENTATION="SIGNED" LPM_PIPELINE=0 MAXIMIZE_SPEED=5 NUM_REPRESENTATION="SIGNED" SKIP_BITS=0 WIDTH_D=4 WIDTH_N=11 denominator numerator quotient remainder
--VERSION_BEGIN 17.0 cbx_cycloneii 2017:04:25:18:06:29:SJ cbx_lpm_abs 2017:04:25:18:06:29:SJ cbx_lpm_add_sub 2017:04:25:18:06:29:SJ cbx_lpm_divide 2017:04:25:18:06:29:SJ cbx_mgl 2017:04:25:18:09:28:SJ cbx_nadder 2017:04:25:18:06:30:SJ cbx_stratix 2017:04:25:18:06:30:SJ cbx_stratixii 2017:04:25:18:06:30:SJ cbx_util_mgl 2017:04:25:18:06:30:SJ  VERSION_END


-- Copyright (C) 2017  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Intel and sold by Intel or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.


FUNCTION alt_u_div_gve (denominator[3..0], numerator[10..0])
RETURNS ( quotient[10..0], remainder[3..0]);
FUNCTION lpm_abs_jn9 (data[3..0])
RETURNS ( result[3..0]);
FUNCTION lpm_abs_1p9 (data[10..0])
RETURNS ( overflow, result[10..0]);

--synthesis_resources = lut 82 
SUBDESIGN abs_divider_gbg
( 
	denominator[3..0]	:	input;
	numerator[10..0]	:	input;
	quotient[10..0]	:	output;
	remainder[3..0]	:	output;
) 
VARIABLE 
	divider : alt_u_div_gve;
	my_abs_den : lpm_abs_jn9;
	my_abs_num : lpm_abs_1p9;
	compl_add_quot_result_int[11..0]	:	WIRE;
	compl_add_quot_cin	:	WIRE;
	compl_add_quot_dataa[10..0]	:	WIRE;
	compl_add_quot_datab[10..0]	:	WIRE;
	compl_add_quot_result[10..0]	:	WIRE;
	compl_add_rem_result_int[4..0]	:	WIRE;
	compl_add_rem_cin	:	WIRE;
	compl_add_rem_dataa[3..0]	:	WIRE;
	compl_add_rem_datab[3..0]	:	WIRE;
	compl_add_rem_result[3..0]	:	WIRE;
	diff_signs	: WIRE;
	gnd_wire	: WIRE;
	neg_quot[10..0]	: WIRE;
	neg_rem[3..0]	: WIRE;
	norm_den[3..0]	: WIRE;
	norm_num[10..0]	: WIRE;
	num_sign	: WIRE;
	protect_quotient[10..0]	: WIRE;
	protect_remainder[3..0]	: WIRE;
	vcc_wire	: WIRE;

BEGIN 
	divider.denominator[] = norm_den[];
	divider.numerator[] = norm_num[];
	my_abs_den.data[] = denominator[];
	my_abs_num.data[] = numerator[];
	compl_add_quot_result_int[] = (compl_add_quot_dataa[], compl_add_quot_cin) + (compl_add_quot_datab[], compl_add_quot_cin);
	compl_add_quot_result[] = compl_add_quot_result_int[11..1];
	compl_add_quot_cin = vcc_wire;
	compl_add_quot_dataa[] = (! protect_quotient[]);
	compl_add_quot_datab[] = ( gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire);
	compl_add_rem_result_int[] = (compl_add_rem_dataa[], compl_add_rem_cin) + (compl_add_rem_datab[], compl_add_rem_cin);
	compl_add_rem_result[] = compl_add_rem_result_int[4..1];
	compl_add_rem_cin = vcc_wire;
	compl_add_rem_dataa[] = (! protect_remainder[]);
	compl_add_rem_datab[] = ( gnd_wire, gnd_wire, gnd_wire, gnd_wire);
	diff_signs = (numerator[10..10] $ denominator[3..3]);
	gnd_wire = B"0";
	neg_quot[] = compl_add_quot_result[];
	neg_rem[] = compl_add_rem_result[];
	norm_den[] = my_abs_den.result[];
	norm_num[] = my_abs_num.result[];
	num_sign = numerator[10..10];
	protect_quotient[] = divider.quotient[];
	protect_remainder[] = divider.remainder[];
	quotient[] = ((protect_quotient[] & (! diff_signs)) # (neg_quot[] & diff_signs));
	remainder[] = ((protect_remainder[] & (! num_sign)) # (neg_rem[] & num_sign));
	vcc_wire = B"1";
END;
--VALID FILE
